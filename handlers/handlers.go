package handlers

import (

	"fmt"
	"strconv"
	"strings"

	"log"

	"github.com/ArtemHvozdov/tg-game-bot.git/models"
	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"
	//"github.com/ArtemHvozdov/tg-game-bot.git/utils"


	"gopkg.in/telebot.v3"
)

type AwaiteState struct {
	StartStateAwait bool
	NameGameRoomAwait bool
	NameGameAwait bool
	QuestionsAwait bool
}


var botState = AwaiteState{}

// Handler for /start
func StartHandler(bot *telebot.Bot, btnCreateGame, btnJoinGame telebot.Btn) func(c telebot.Context) error {

	return func(c telebot.Context) error {
		startMsg := "–û—É, –ø—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –•–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –¥–ª—è —Å–≤–æ—ó—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–æ–¥—Ä—É–≥? –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–ø–µ—Ä–µ–¥ –¥–æ –ø—Ä–∏–≥–æ–¥!"


		// Create keyboard
		menu := &telebot.ReplyMarkup{ResizeKeyboard: true}
		menu.Reply(menu.Row(btnCreateGame, btnJoinGame))


		// –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
		inviteData := c.Data() // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ /start
		gameRoomID, err := strconv.Atoi(inviteData)
		if err == nil && gameRoomID > 0 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			gameRoom, err := storage_db.GetGameRoomByID(gameRoomID)
			if err != nil || gameRoom == nil {
				return c.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.")
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			successMsg := fmt.Sprintf(
				"–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏ '%s'. –ó–∞–ø—Ä–æ—à—É—î–º–æ –¥–æ —É—á–∞—Å—Ç—ñ!\n–Ü–Ω–≤–∞–π—Ç-–ª—ñ–Ω–∫: %s",
				gameRoom.Title, gameRoom.InviteLink,
			)
			return c.Send(successMsg)
		}

		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		return c.Send(startMsg, menu)
	}
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
func extractGameRoomID(link string) string {
	parts := strings.Split(link, "start=")
	if len(parts) == 2 {
		return parts[1]
	}
	return ""
}


// Handler create game
// func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
// 	return func(c telebot.Context) error {
// 		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
// 		if err := c.Send("üé≤ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–Ω–∞—Ç–∏:"); err != nil {
// 			return err
// 		}

// 		// –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–≥—Ä—ã
// 		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
// 			gameTitle := tc.Text()

// 			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
// 			inviteLink := utils.GenerateInviteLink()

// 			// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã GameRoom
// 			gameRoom := models.GameRoom{
// 				Title:      gameTitle,
// 				InviteLink: inviteLink,
// 			}

// 			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –≤ –ë–î
// 			err := storage_db.CreateGameRoom(gameRoom)
// 			if err != nil {
// 				log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:", err)
// 				return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
// 			}

// 			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
// 			successMsg := "‚úÖ –ì—Ä—É '" + gameTitle + "' —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n" +
// 				"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: " + inviteLink
// 			return tc.Send(successMsg)
// 		})

// 		return nil
// 	}
	
// }

// Handler create game
// Handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
		if err := c.Send("üé≤ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏:"); err != nil {
			return err
		}

		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
			gameRoomTitle := tc.Text()

			// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É (–ë–ï–ó –°–û–ó–î–ê–ù–ò–Ø –í –ë–î)
			gameRoom := models.GameRoom{
				Title: gameRoomTitle,
			}

			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
			if err := tc.Send("üìõ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏:"); err != nil {
				return err
			}

			bot.Handle(telebot.OnText, func(tc telebot.Context) error {
				gameTitle := tc.Text()

				// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
				game := models.Game{
					Name:   gameTitle,
					Status: "waiting",
				}

				gameID, err := storage_db.CreateGame(game)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:", err)
					return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
				}

				// –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º GameRoom –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ GameID
				gameRoom.GameID = &gameID
				_, inviteLink, err := storage_db.CreateGameRoom(gameRoom)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:", err)
					return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
				}

				// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã
				if err := tc.Send("‚ùì –í–≤–µ–¥—ñ—Ç—å 4 –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`–ü–∏—Ç–∞–Ω–Ω—è 1 | –í—ñ–¥–ø–æ–≤—ñ–¥—å 1`"); err != nil {
					return err
				}

				var tasks []models.Task

				bot.Handle(telebot.OnText, func(tc telebot.Context) error {
					text := tc.Text()
					parts := strings.SplitN(text, "|", 2)

					if len(parts) != 2 {
						return tc.Send("‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `–ü–∏—Ç–∞–Ω–Ω—è | –í—ñ–¥–ø–æ–≤—ñ–¥—å`")
					}

					question := strings.TrimSpace(parts[0])
					answer := strings.TrimSpace(parts[1])

					tasks = append(tasks, models.Task{
						GameID:   gameID,
						Question: question,
						Answer:   answer,
					})

					// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 4 –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –ë–î
					if len(tasks) == 2 {
						for _, task := range tasks {
							storage_db.CreateTask(task)
						}

						successMsg := fmt.Sprintf(
							"‚úÖ –ì—Ä—É '%s' —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: %s",
							gameTitle, inviteLink,
						)
						return tc.Send(successMsg)
					}

					// –ü—Ä–æ—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
					return tc.Send(fmt.Sprintf("üìù –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è %d:", len(tasks)+1))
				})

				return nil
			})

			return nil
		})

		return nil
	}
}





// Handler join to game
func JoinGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		return c.Send("üîë –í–≤–µ–¥–∏ –∫–æ–¥ –≥—Ä–∏, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!")
	}
}