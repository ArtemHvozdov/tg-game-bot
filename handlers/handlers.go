package handlers

import (

	"fmt"
	"strconv"
	"strings"

	"time"


	"log"

	"github.com/ArtemHvozdov/tg-game-bot.git/models"
	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"


	//"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	"gopkg.in/telebot.v3"
)

type AwaiteState struct {
	StartStateAwait bool
	NameGameRoomAwait bool
	NameGameAwait bool
	QuestionsAwait bool
}


var botState = AwaiteState{}

// Handler for /start
func StartHandler(bot *telebot.Bot, btnCreateGame, btnJoinGame, btnHelpMe telebot.Btn) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		startMsg := "–û—É, –ø—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –•–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –¥–ª—è —Å–≤–æ—ó—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–æ–¥—Ä—É–≥? –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–ø–µ—Ä–µ–¥ –¥–æ –ø—Ä–∏–≥–æ–¥!"

		// Create keyboard
		menu := &telebot.ReplyMarkup{ResizeKeyboard: true}
		//.Reply(menu.Row(btnCreateGame, btnJoinGame, btnHelpMe))

		// Buttons on the first line
		row1 := menu.Row(btnCreateGame, btnJoinGame)
		// Button on the second row (all size)
		row2 := menu.Row(btnHelpMe)

		menu.Reply(row1, row2)

		// Get ID game fron invite-link
		inviteData := c.Data() // Get string before /start
		gameID, err := strconv.Atoi(inviteData)
		if err == nil && gameID > 0 { // Check that number is correct
			// Get info about game from DB
			game, err := storage_db.GetGameById(gameID)
			if err != nil || gameID == 0 {
				return c.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.") 
			}

			player := &models.Player{
				ID:       user.ID,
				UserName: user.Username,
				Name:     user.FirstName,
				Passes:   0,
				GameID:   game.ID,
				Role:     "player",
			}

			if err := storage_db.AddPlayerToGame(player); err != nil {
				log.Printf("Failed to add player to game: %v", err)
				return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
			}

			notifyPlayerJoined(bot, game.ID, *player)

			successMsg := fmt.Sprintf(
				"–ô–µ–π! –¢–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∞—Å—è –¥–æ –≥—Ä–∏ '%s'. üéâ –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—Å—ñ –∑–±–µ—Ä—É—Ç—å—Å—è, —ñ –º–æ–∂–Ω–∞ –±—É–¥–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
				game.Name,
			)
			return c.Send(successMsg)
		}


		// If this is not invite-link, send start-message
		c.Send(startMsg, menu)

		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
			return tc.Send("ü§î –ó–∞—Ä–∞–∑ —è –Ω–µ –æ—á—ñ–∫—É—é –≤—ñ–¥ —Ç–µ–±–µ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.")
		})

		return nil
	}
}

/// Handler create game
func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		userAdmin := c.Sender()
		// Ask tha name game
		if err := c.Send("üé≤ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏:"); err != nil {
			return err
		}

		var gameName string

		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
            gameName = tc.Text()

            game, err := storage_db.CreateGame(gameName)
            if err != nil {
                log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:", err)
                return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
            }

			playerAdmin := &models.Player{
				ID: userAdmin.ID,
				UserName: userAdmin.Username,
				Name: userAdmin.FirstName,
				Passes: 0,
				GameID: game.ID,
				Role: "admin",
			}

			if err := storage_db.AddPlayerToGame(playerAdmin); err != nil {
				log.Printf("Failed to add player-admin to game: %v", err)
				return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
			}

            // Move on to collecting questions
            return askQuestions(bot, tc, game, 2)
        })

        return nil

		// bot.Handle(telebot.OnText, func(tc telebot.Context) error {
		// 	gameName = tc.Text()

		// 	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É (–ë–ï–ó –°–û–ó–î–ê–ù–ò–Ø –í –ë–î)
		// 	gameRoom := models.GameRoom{
		// 		Title: gameRoomTitle,
		// 	}

		// 	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
		// 	if err := tc.Send("üìõ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏:"); err != nil {
		// 		return err
		// 	}

		// 	bot.Handle(telebot.OnText, func(tc telebot.Context) error {
		// 		gameTitle := tc.Text()

		// 		// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
		// 		game := models.Game{
		// 			Name:   gameTitle,
		// 			Status: "waiting",
		// 		}

		// 		gameID, err := storage_db.CreateGame(game)
		// 		if err != nil {
		// 			log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:", err)
		// 			return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
		// 		}

		// 		// –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º GameRoom –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ GameID
		// 		gameRoom.GameID = &gameID
		// 		_, inviteLink, err := storage_db.CreateGameRoom(gameRoom)
		// 		if err != nil {
		// 			log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:", err)
		// 			return tc.Send("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
		// 		}

		// 		// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã
		// 		if err := tc.Send("‚ùì –í–≤–µ–¥—ñ—Ç—å 4 –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`–ü–∏—Ç–∞–Ω–Ω—è 1 | –í—ñ–¥–ø–æ–≤—ñ–¥—å 1`"); err != nil {
		// 			return err
		// 		}

		// 		var tasks []models.Task

		// 		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
		// 			text := tc.Text()
		// 			parts := strings.SplitN(text, "|", 2)

		// 			if len(parts) != 2 {
		// 				return tc.Send("‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `–ü–∏—Ç–∞–Ω–Ω—è | –í—ñ–¥–ø–æ–≤—ñ–¥—å`")
		// 			}

		// 			question := strings.TrimSpace(parts[0])
		// 			answer := strings.TrimSpace(parts[1])

		// 			tasks = append(tasks, models.Task{
		// 				GameID:   gameID,
		// 				Question: question,
		// 				Answer:   answer,
		// 			})

		// 			// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 4 –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –ë–î
		// 			if len(tasks) == 2 {
		// 				for _, task := range tasks {
		// 					storage_db.CreateTask(task)
		// 				}

		// 				successMsg := fmt.Sprintf(
		// 					"‚úÖ –ì—Ä—É '%s' —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: %s",
		// 					gameTitle, inviteLink,
		// 				)
		// 				return tc.Send(successMsg)
		// 			}

		// 			// –ü—Ä–æ—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
		// 			return tc.Send(fmt.Sprintf("üìù –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è %d:", len(tasks)+1))
		// 		})

		// 		return nil
		// 	})

		// 	return nil
		// })

		//return nil
	}
}

func askQuestions(bot *telebot.Bot, c telebot.Context, game *models.Game, count_questions int) error {
	count := 0
	maxQuestions := count_questions
	inviteLink := game.InviteLink

	// Ask the first question
	if err := c.Send("‚ùì –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`–ü–∏—Ç–∞–Ω–Ω—è | –í—ñ–¥–ø–æ–≤—ñ–¥—å`"); err != nil {
		log.Println("Failed to send initial question prompt:", err)
		return err
	}

	time.Sleep(500 * time.Millisecond) // Wait for 2 seconds before sending the next message

	c.Send("üìù –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è 1:")

	// Temporary slice to hold tasks in memory
	var tasks []models.Task

	bot.Handle(telebot.OnText, func(tc telebot.Context) error {
		text := tc.Text()
		parts := strings.SplitN(text, "|", 2)

		if len(parts) != 2 {
			return tc.Send("‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `–ü–∏—Ç–∞–Ω–Ω—è | –í—ñ–¥–ø–æ–≤—ñ–¥—å`")
		}

		question := strings.TrimSpace(parts[0])
		answer := strings.TrimSpace(parts[1])

		task := models.Task{
			GameID:  game.ID,
			Question: question,
			Answer:   answer,
		}

		if err := storage_db.CreateTask(task); err != nil {
			log.Println("Failed to save task to the database:", err)
			return tc.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
		}

		tasks = append(tasks, task)
		count++

		log.Printf("Task saved for GameID %d: '%s' -> '%s'", game.ID, question, answer)

		if count >= maxQuestions {
			successMsg := fmt.Sprintf(
				"‚úÖ –ì—Ä—É '%s' —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–ì—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É!",
				game.Name,
			)
			bot.Handle(telebot.OnText, nil) // Detach handler
			tc.Send(successMsg)

			time.Sleep(500 * time.Millisecond) // Wait for 2 seconds before sending the next message
			// Send the invite link
			inviteMsg := fmt.Sprintf("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: %s", inviteLink)

			menuStartGame := &telebot.ReplyMarkup{}
			btnStartGame := menuStartGame.Data("–†–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É", "start_game", strconv.Itoa(game.ID))
			menuStartGame.Inline(menuStartGame.Row(btnStartGame))

			return tc.Send(inviteMsg, menuStartGame)
		}

		return tc.Send(fmt.Sprintf("üìù –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è %d:", count+1))
	})

	return nil
}

func StartGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func (c telebot.Context) error {
		gameID, _ := strconv.Atoi(c.Callback().Data)
		

		user := c.Sender()
		log.Printf("User %s (%d) is starting game %d", user.Username, user.ID, gameID)

		// Check if the game exists
		game, err := storage_db.GetGameById(gameID)
		if err != nil {
		log.Printf("Failed to get game %d: %v", gameID, err)
			return c.Send("–û–π, –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —Ü—é –≥—Ä—É. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...")
		}

		// Check if the game already started
		if game.Status == "playing" {
			return c.Send("–¶—è –≥—Ä–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!")
		}

		// Check if there are at least 2 players
		playerCount, err := storage_db.GetPlayerCount(gameID)
		if err != nil {
			log.Printf("Failed to get player count: %v", err)
			return c.Send("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
		}

		if playerCount < 2 {
			return c.Send("–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É, –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 –≥—Ä–∞–≤—Ü—è. –ó–∞–ø—Ä–æ—Å–∏ —â–µ –∫–æ–≥–æ—Å—å!")
		}

		if playerCount >= 2 {
			allTasks, err := storage_db.GetAllTasksByGameID(gameID)
			if err != nil {
				log.Printf("Failed to get tasks for game %d: %v", gameID, err)
				return c.Send("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
			}

			//countTasks := len(allTasks)
			allPlayers , err := storage_db.GetAllPlayersByGameID(gameID)
			if err != nil {
				log.Printf("Failed to get players for game %d: %v", gameID, err)
				return c.Send("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
			}

			// Send first task to all players
			for _, player := range allPlayers {
				task := allTasks[0]
				taskMsg := fmt.Sprintf("üéâ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –¢–≤–æ—î –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è: \n%s", task.Question)
				_, err := bot.Send(&telebot.Chat{ID: player.ID}, taskMsg)
				if err != nil {
					log.Printf("Failed to send task to player %s: %v", player.UserName, err)
					return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
				}

			}

		}


		return nil
	}
}


// Handler join to game
func JoinGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		return c.Send("–¢–≤–æ—ó –ø–æ–¥—Ä—É–≥–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –≥—Ä–∏? üè† –¢–æ–¥—ñ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")
	}
}

func HelpMeHandler(bot *telebot.Bot) func (c telebot.Context) error {
	return func(c telebot.Context) error {
		helpText := `
			–ü—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –Ø –±–æ—Ç –¥–ª—è —ñ–≥–æ—Ä –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏ –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:

			/start - –ü–æ—á–∞—Ç–∏ –±–æ—Ç–∞ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É –∞–±–æ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó
			/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

			–í –≥—Ä—ñ —Ç–∏ –º–æ–∂–µ—à:
			- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
			- –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∏)
			- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥—Ä—É–∑—ñ–≤

			–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–•–µ–ª–ø –º—ñ" –≤ –º–µ–Ω—é!
		`
		return c.Send(helpText)
	}
}

func notifyPlayerJoined(bot *telebot.Bot, gameID int, player models.Player) {
	// Notify all players in the game that a new player has joined
	allPlayers, err := storage_db.GetAllPlayersByGameID(gameID)
	if err != nil {
		log.Printf("Failed to get players for game %d: %v", gameID, err)
		return
	}

	for _, p := range allPlayers {
		if p.ID != player.ID { // Don't notify the new player
			msg := fmt.Sprintf("üéâ –ì—Ä–∞–≤–µ—Ü—å %s –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!", player.UserName)
			bot.Send(&telebot.Chat{ID: p.ID}, msg)
		}

	}
}