package handlers

import (
	"encoding/json"
	"fmt"
	//"log"
	"math/rand"

	//"image"

	//"image/color"
	//"image/color"
	//"image/draw"
	//"image/jpeg"
	//"io"
	//"math"
	//"os"
	//"path/filepath"
	"sync"

	//"log"
	//"os"
	"strconv"

	"strings"
	"time"

	"github.com/ArtemHvozdov/tg-game-bot.git/config"
	"github.com/ArtemHvozdov/tg-game-bot.git/models"
	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"
	"github.com/ArtemHvozdov/tg-game-bot.git/internal/msgmanager"
	"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	//"github.com/fogleman/gg"
	"github.com/sirupsen/logrus"

	//"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	"gopkg.in/telebot.v3"
)

// Photo task session state
type PhotoTaskSession struct {
    UserID          int64
    CurrentQuestion int
    IsActive        bool
    QuestionMsgID   int
    AlbumMsgIDs     []int
    StartedAt       time.Time
}

// Photo questions
var photoQuestions = []string{
    "üì∏ –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –º—ñ—Å—Ü—è, –¥–µ —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –ø—Ä–æ–≤–æ–¥–∏—à —á–∞—Å –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏",
    "üåÖ –ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ, —è–∫–µ –ø–µ—Ä–µ–¥–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –≤–∞—à–æ—ó –¥—Ä—É–∂–±–∏",
    "üíù –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–µ—á—ñ, —è–∫–∞ –Ω–∞–≥–∞–¥—É—î —Ç–æ–±—ñ –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ –º–æ–º–µ–Ω—Ç–∏ –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏",
}

var processedAlbums = make(map[string]time.Time) // processedAlbums keeps track of AlbumIDs that were already handled,
												 // to prevent sending multiple acknowledgments for a single album.

var cfg = config.LoadConfig()

var (
	joinReminderMessages = make(map[int64]int)
	

	joinReminderMutex = sync.Mutex{}

	menuIntro *telebot.ReplyMarkup
	menuExit  *telebot.ReplyMarkup

	introBtnHelp     telebot.Btn
	introBtnSupport  telebot.Btn
	introBtnExit     telebot.Btn
	btnExactlyExit   telebot.Btn
	btnReturnToGame  telebot.Btn
)

func InitButtons(gameID int) {
	menuIntro = &telebot.ReplyMarkup{}
	menuExit = &telebot.ReplyMarkup{}

	introBtnHelp = menuIntro.Data("–•–µ–ª–ø", "help_menu")
	introBtnSupport = menuIntro.URL("–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")
	introBtnExit = menuIntro.Data("–í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_%d", gameID))

	btnExactlyExit = menuExit.Data("–í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_game_%d", gameID))
	btnReturnToGame = menuExit.Data(" << –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "return_to_game")

	menuIntro.Inline(menuIntro.Row(introBtnHelp))
	menuExit.Inline(menuExit.Row(btnExactlyExit), menuExit.Row(btnReturnToGame))
}


func StartHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		//chat := c.Chat()
		user := c.Sender()
		
		utils.Logger.WithFields(logrus.Fields{
			"user_id": user.ID,
			"username": user.Username,
		}).Info("User started the bot")

		startMsg := `–û–£, –ü–†–ò–í–Ü–¢ –ó–Ü–†–û–ù–¨–ö–û! üåü

–•–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –¥–ª—è —Å–≤–æ—ó—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–æ–¥—Ä—É–≥? –õ–æ–≤–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–∞–≥—ñ—é‚ú®:

‚ûä –°—Ç–≤–æ—Ä–∏ –≥—Ä—É–ø—É –∑ –£–°–Ü–ú–ê –ø–æ–¥—Ä—É–≥–∞–º–∏, –∑ —è–∫–∏–º–∏ —Ö–æ—á–µ—à –≥—Ä–∞—Ç–∏!
(–ù–µ –∑–∞–±—É–¥—å –Ω—ñ–∫–æ–≥–æ! –ü—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞—Ç–∏ –≤–∂–µ –Ω–µ –≤–∏–π–¥–µ üò¨)

‚ûã –î–æ–¥–∞–π —Ç–∞–∫–æ–∂ —ñ –º–µ–Ω–µ ‚Äî @bestie_game_bot ‚Äî —è —Ç–≤–æ—è –≤–µ–¥—É—á–∞, —Ö–µ-—Ö–µ üòé

‚ûå –ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ —ñ –Ω–∞–∑–≤—É –¥–ª—è –≥—Ä—É–ø–∏! –¶–µ –Ω–µ must-have, –∞–ª–µ —Ç–∞–∫ —Ñ–∞–Ω–æ–≤—ñ—à–µ ü§™

‚ûç –î–æ—á–µ–∫–∞–π—Å—è, –ø–æ–∫–∏ –≤—Å—ñ –ø–æ–¥—Ä—É–∂–∫–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç—å ‚Äú–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏‚Äù 
(–Ω–µ —Ç–∏—Å–Ω–∏ ‚Äú–ü–æ—á–∞—Ç–∏ –≥—Ä—É‚Äù, –ø–æ–∫–∏ –Ω–µ –∑—ñ–±—Ä–∞–ª–∏—Å—å —É—Å—ñ ‚ùóÔ∏è)

‚ûé –ö–æ–ª–∏ –£–°–Ü –ø—Ä–∏—î–¥–Ω–∞—é—Ç—å—Å—è ‚Äî —Ç–∏—Å–Ω–∏ ‚Äú–ü–æ—á–∞—Ç–∏ –≥—Ä—É‚Äù! üöÄ
–¶–µ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–∏, –±–æ —Ç–∏ —Ç—É—Ç ‚Äî –±–æ—Å—Å! üíÖüëë

–Ü‚Ä¶ let the madness begin! üíÉüéâ

ps  –ú–∞—î—à–µ —Ç—Ä—É–¥–Ω–æ—â—ñ? –¢–æ–¥—ñ –ø–∏—à–∏ —Å—é–¥–∏`

		startMenu := &telebot.ReplyMarkup{}
		startBtnSupport := startMenu.URL("üïπÔ∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")

		startMenu.Inline(
			startMenu.Row(startBtnSupport),
		)

		return c.Send(startMsg, startMenu)
 	}
}

func TestRunHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		utils.Logger.Info("Test mode is running")

		SetupGameHandler(bot)(c)

		return nil
	}
}

/// Handler create game
func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		//userAdmin := c.Sender()
		gameStartMsg := `–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:
1. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø—É
2. –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ —Ü—é –≥—Ä—É–ø—É –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω–∞
3. –£ –≥—Ä—É–ø—ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /check_admin_bot`

		user := c.Sender()
		utils.Logger.Info("CreateGameHandler buton's logs: User:", user.Username, user.ID)
    	
		if err := c.Send(gameStartMsg); err != nil {
			return err
		}

    return nil
	}
}

func HandleBotAddedToGroup(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()
		
		utils.Logger.WithFields(logrus.Fields{
			"source": "HandleAddedToGroup",
			"user:": user.Username,
			"user_id": user.ID,
			"group": chat.Title,
			"group_id": chat.ID,
		}).Info("The user added the bot to the group manually")
		
		// btnStartGame := telebot.Btn{Text: "–ü–æ—á–∞—Ç–∏ –≥—Ä—É"}

		SetupGameHandler(bot)(c)

		return nil
	}

}


// Handler join to game
func JoinGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		
		return c.Send("–¢–≤–æ—ó –ø–æ–¥—Ä—É–≥–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –≥—Ä–∏? üè† –¢–æ–¥—ñ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")
	}
}

func HelpMeHandler(bot *telebot.Bot) func (c telebot.Context) error {
	return func(c telebot.Context) error {
		helpText := `
			–ü—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –Ø –±–æ—Ç –¥–ª—è —ñ–≥–æ—Ä –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏ –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ –±–æ—Ç–∞ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É –∞–±–æ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

–í –≥—Ä—ñ —Ç–∏ –º–æ–∂–µ—à:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
- –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∏)
- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥—Ä—É–∑—ñ–≤

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–•–µ–ª–ø –º—ñ" –≤ –º–µ–Ω—é!
		`
		return c.Send(helpText)
	}
}

func notifyPlayerJoined(bot *telebot.Bot, gameID int, player models.Player) {
	// Notify all players in the game that a new player has joined
	allPlayers, err := storage_db.GetAllPlayersByGameID(gameID)
	if err != nil {
		utils.Logger.Errorf("Failed to get players for game %d: %v", gameID, err)
		return
	}

	for _, p := range allPlayers {
		if p.ID != player.ID { // Don't notify the new player
			msg := fmt.Sprintf("üéâ –ì—Ä–∞–≤–µ—Ü—å %s –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!", player.UserName)
			bot.Send(&telebot.Chat{ID: p.ID}, msg)
		}

	}
}

// SetupGameHandler handles the /check_admin_bot command
func SetupGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()
	
		utils.Logger.WithFields(logrus.Fields{
			"source": "SetupGameHandler",
			"user_id": user.ID,
			"username": user.Username,
			"group": chat.Title,
			"group_id": chat.ID,
		}).Infof("Start creating game in the group (%d | %s)", chat.ID, chat.Title)
		
		gameName := chat.Title
	
		game, err := storage_db.CreateGame(gameName, chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error creating game %s in the group %s: %v", gameName, chat.Title, err)
		}

		playerAdmin := &models.Player{
			ID: user.ID,
			UserName: user.Username,
			Name: user.FirstName,
			Status:   models.StatusPlayerNoWaiting,
			Skipped:  0,
			GameID: game.ID,
			Role: "admin",
		}
		
		if err := storage_db.AddPlayerToGame(playerAdmin); err != nil {
			utils.Logger.Errorf("Failed to add player-admin (%d | %s) to game %s: %v", playerAdmin.ID, playerAdmin.UserName, gameName, err)
			return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
		}

		InitButtons(game.ID)

		// joinBtn := telebot.InlineButton{
		// 	Unique: "join_game_btn",
		// 	Text:   "üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏",
		// }

		joinBtn := menuIntro.Data("üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "join_game_btn")
		
		//inline := &telebot.ReplyMarkup{}
		// inline.InlineKeyboard = [][]telebot.InlineButton{
		// 	{joinBtn},
		// 	{introBtnSupport},
		// 	{introBtnExit},
		// }

		menuIntro.Inline(
			menuIntro.Row(joinBtn),     // Join button
			menuIntro.Row(introBtnSupport),  // Support button  
			menuIntro.Row(introBtnExit),     // Exit button
		)

		//msgJoin, _ := bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", inline)
		//bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", inline)

		bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", menuIntro)
				
		// Delay pause between start game msg and join msg 
		time.Sleep(cfg.Durations.TimePauseMsgStartGameAndMsgJoinGame)

		// Version with Inline Button
		menu := &telebot.ReplyMarkup{}
		btnStartGame := menu.Data("–ü–æ—á–∞—Ç–∏ –≥—Ä—É", "start_game")
		menu.Inline(menu.Row(btnStartGame))

		// bot.Handle(&btnStartGame, func(c telebot.Context) error {
		// 	StartGameHandlerFoo(bot)(c)

		// 	return nil
		// })

		bot.Send(chat, "–¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, –∫–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏ –≥—Ä—É! üéÆ", menu)

		return nil
	}
}

func JoinBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return  func(c telebot.Context) error {
			user := c.Sender()
			chat := c.Chat()

			utils.Logger.Info("Join btn handler was called. New funcion")
      
			utils.Logger.WithFields(logrus.Fields{
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
				"group_id": chat.ID,
		  	}).Info("Inline button was called for joined to game")

			// Get game by chat ID
			game, err := storage_db.GetGameByChatId(chat.ID)
			if err != nil {
				utils.Logger.Errorf("Game not found for chat %d: %v", chat.ID, err)
				return c.Respond(&telebot.CallbackResponse{Text: "–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"})
			}

			userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
			if err != nil {
				utils.Logger.Errorf("Failed to check if user %s is in game: %v", chat.Username, err)
				return nil
			}

			if userIsInGame {
				msg, err := bot.Send(chat, fmt.Sprintf("üéâ @%s, —Ç–∏ –≤–∂–µ –≤ –≥—Ä—ñ! –ù–µ –Ω–µ—Ä–≤—É–π—Å—è", user.Username))
				if err != nil {
					utils.Logger.Errorf("Failed to send message for user %s: %v", user.Username, err)
					return nil
				}

				// Delay delete msg user is in game aready. Future: change time to 5 cseconds
				time.Sleep(cfg.Durations.TimeDeleteMsgUserIsAlreadyInGame)

				err = bot.Delete(msg)
				if err != nil {
					utils.Logger.Errorf("Failed to delete message for user %s: %v", user.Username, err)
					return nil
				}
				return nil
			}

			player := &models.Player{
				ID:       user.ID,
				UserName: user.Username,
				Name:     user.FirstName,
				Status:   models.StatusPlayerNoWaiting,
				Skipped:  0,
				GameID:   game.ID,
				Role:     "player",
			}

			if err := storage_db.AddPlayerToGame(player); err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "CheckAdminHandler",
					"player:": player.UserName,
					"player_id": player.ID,
					"game_id": game.ID,
				}).Error("Failed to add player to game")
				return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è üò¢"})
			}

			statusGame := game.Status
			if statusGame == models.StatusGamePlaying {
				err := bot.Delete(c.Callback().Message)
				if err != nil {
					utils.Logger.Errorf("Failed to delete message with join button: %v", err)
					return nil
				}
			}

			joinedMessages, err := utils.LoadJoinMessagges("internal/data/messages/group/hello_messages/hello_messages.json")
			if err != nil {
				utils.Logger.Errorf("Failed to load join messages: %v", err)
				return nil
			}

			//msg, err := bot.Send(chat, fmt.Sprintf("‚ú® @%s –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!", user.Username))
			_, err = bot.Send(chat, fmt.Sprintf(joinedMessages[rand.Intn(len(joinedMessages))], user.Username))
			if err != nil {
				utils.Logger.Errorf("Failed to send join message for user %s: %v", user.Username, err)
				return nil
			}

			return c.Respond(&telebot.CallbackResponse{Text: "–¢–∏ –≤ –≥—Ä—ñ! üéâ"})
	}
}

func SendJoinGameReminder(bot *telebot.Bot) func (c telebot.Context) error {
	return func (c telebot.Context) error {
		//userID := c.Sender().ID
		chat := c.Chat()
		user := c.Sender()

		joinReminderMutex.Lock()
		defer joinReminderMutex.Unlock()

		// Checking to see if there has already been a message
		if msgID, ok := joinReminderMessages[user.ID]; ok && msgID != 0 {
			// Trying to get this message (or just not sending it again)
			// In Telebot, you can't get a message by ID, so we'll check by trying to delete it
			err := bot.Delete(&telebot.Message{ID: msgID, Chat: c.Chat()})
			if err == nil {
				// There was an old message - it's still alive, let's exit
				utils.Logger.Infof("Join reminder message already exists for user %d", user.ID)
				return nil
			} else if !strings.Contains(err.Error(), "message to delete not found") {
				utils.Logger.Warnf("Failed to delete existing join reminder: %v", err)
				// In any case, we remove it from the map
				delete(joinReminderMessages, user.ID)
			}
		}

		joinBtn := telebot.InlineButton{
			Unique: "join_game_btn",
			Text:   "üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏",
		}
		inline := &telebot.ReplyMarkup{}
		inline.InlineKeyboard = [][]telebot.InlineButton{
			{joinBtn},
		}

		msgText := fmt.Sprintf(`üéâ @%s, —Ç–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ! –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è —ñ –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.`, c.Sender().Username)
		_, err := msgmanager.SendTemporaryMessage(
			chat.ID, 
			user.ID, 
			msgmanager.TypeReminderJoinGame, 
			msgText, 
			cfg.Durations.TimeDeleteMsgJoinGamerReminder,
		)
		if err != nil {
			utils.Logger.Errorf("Error sending reminder joint to game msg for user %s in the chat (%d | %d)", user.Username, chat.ID, chat.Title)
		}

		return nil
	}
}

func GenerateChatInviteLink(bot *telebot.Bot, chat *telebot.Chat) (string, error) {
	params := map[string]interface{}{
		"chat_id": chat.ID,
	}

	raw, err := bot.Raw("exportChatInviteLink", params)
	if err != nil {
		utils.Logger.Errorf("Error generating invite link for the group %s: %v", chat.Title, err)
		return "", fmt.Errorf("failed to export chat invite link: %w", err)
	}

	// Struct of response Telegram API
	var result struct {
		Result string `json:"result"`
	}

	err = json.Unmarshal(raw, &result)
	if err != nil {
		utils.Logger.Errorf("Error parsing invite link for the group %s response: %v", chat.Title, err)
		return "", fmt.Errorf("failed to parse invite link response: %w", err)
	}

	return result.Result, nil
}


// StartGameHandlerFoo handles the "start_game" button press in a group chat
func StartGameHandlerFoo(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()

		utils.Logger.WithFields(logrus.Fields{
			"user_id": user.ID,
			"username": user.Username,
			"group": chat.Title,
		}).Infof("Start game handler called by %s", user.Username)

		memberUser, _ := bot.ChatMemberOf(chat, user)

		if memberUser.Role != telebot.Administrator && memberUser.Role != telebot.Creator {
			warningMsgText := fmt.Sprintf("@%s, —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É –º–æ–∂–µ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏. –¢—Ä–æ—Ö–∏ —Ç–µ—Ä–ø—ñ–Ω–Ω—è —ñ –ø–æ—á–Ω–µ–º–æ.", user.Username)
			
			utils.Logger.WithFields(logrus.Fields{
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
			}).Warn("Click to button /start_game, user is not admin in the group, tha can't start game")

			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				msgmanager.TypeGameStart,
				warningMsgText,
				cfg.Durations.TimeDeleteMsgOnlyAdmniCanStartGame,
			)
			if err != nil {
				utils.Logger.Errorf("Error sending warning message about start game in the chat: %v", err)
			}			
			
			return nil
		}

		// Delete message with button "Start game" after click
		go func ()  {
			err := bot.Delete(c.Message())
			if err != nil {
			utils.Logger.Errorf("Failed to delete message with button: %v", err)
			}
		}()

		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error getting game by chat ID(%d): %v", chat.ID, err)
			return c.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É.")
		}

		utils.Logger.Infof("Game (%s) status: %s", game.Name, game.Status)

		// Checking: this have to be a group chat
		if chat.Type == telebot.ChatPrivate {
			c.Send("–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ üßë‚Äçü§ù‚Äçüßë")
			return nil
		}

		if game.Status == models.StatusGamePlaying {
			msgText := fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–≤ –≥—Ä—É!", user.Username)
			msg, err := bot.Send(chat, msgText)
			if err != nil {
				utils.Logger.Errorf(
					"Error sending message that game %s has already started for user (%d | %s): %v", game.Name, user.ID, user.Username, err,
				)
			}

			// Delay delete msg you already srarted game
			time.Sleep(cfg.Durations.TimeDeleteMsgYouAlreadyStartedGame)
			err = bot.Delete(msg)
			if err != nil {
				utils.Logger.Errorf(
					"Error deleting message that game %s has already started for user (%d | %s): %v", game.Name, user.ID, user.Username, err,
				)
			}

			return nil

		}

		//InitButtons(game.ID)

		msgTextStartGame := `–ü–†–ò–í–Ü–¢, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –§—ñ–±—ñ üòä, —ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∏ —Ç–∏–∂–Ω—ñ —è –±—É–¥—É –≤–∞—à–∏–º –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–º —É –≥—Ä—ñ ‚ú® –ì—Ä—ñ, –∑ —è–∫–æ—ó –≤–∏–π–¥—É—Ç—å –ø–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—è–º–∏ –≤—Å—ñ, —è–∫—â–æ –ø–æ–¥—ñ–ª—è—Ç—å—Å—è –æ–¥–Ω–∞ –∑ –æ–¥–Ω–æ—é —Å–≤–æ—ó–º –æ—Å–æ–±–ª–∏–≤–∏–º —Å–∫–∞—Ä–±–æ–º ‚Äì —É–≤–∞–≥–æ—é. –í—ñ–¥ –≤–∞—Å –≤–∏–º–∞–≥–∞—î—Ç—å—Å—è —Ç—Ä–æ—à–∫–∏ —á–∞—Å—É —ñ –≥–æ—Ç–æ–≤–µ –¥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å —Å–µ—Ä–¥–µ–Ω—å–∫–æ, –≤—ñ–¥ –º–µ–Ω–µ ‚Äì —Ü—ñ–∫–∞–≤–∞ –ø—Ä–∏–≥–æ–¥–∞, —è–∫—É —è –∑–∞–≥–æ—Ä–Ω—É–ª–∞ —É —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å–ø—ñ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.

–ö–æ–∂–Ω–∞ –¥—Ä—É–∂–±–∞ - –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω–∞, —è–∫ –±—É–ª–æ—á–∫–∞, –ø–æ–≤–Ω–∞ —Ä–æ–¥–∑–∏–Ω–æ–∫ üçá –ú–∏ –±—É–¥–µ–º–æ –≤—ñ–¥—â–∏–ø—É–≤–∞—Ç–∏ —à–º–∞—Ç–æ—á–æ–∫ –∑–∞ —à–º–∞—Ç–æ—á–∫–æ–º, –≤–∏–∫–æ–Ω—É—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞ –∫–æ–∂–Ω–µ —É –≤–∞—Å –±—É–¥–µ 48 –≥–æ–¥–∏–Ω —ñ –Ω–µ–∑–ª—ñ—á–µ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤–∞—à–∏—Ö –±–µ—Å—Ç—ñ. –Ø–∫—â–æ —è–∫–∞—Å—å —Ä–æ–¥–∑–∏–Ω–∫–∞ –≤–∞–º –Ω–µ –¥–æ —Å–º–∞–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ê–ª–µ —Ç–∞–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫—ñ–≤ –∑–∞ –≤—Å—é –≥—Ä—É –∫–æ–∂–Ω—ñ–π —É—á–∞—Å–Ω–∏—Ü—ñ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è –ª–∏—à–µ 3.

–¢–∞–∫–æ–∂ —î –∞–≤–∞—Ä—ñ–π–Ω–∞ –∫–Ω–æ–ø–∫–∞, —â–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ —Ü—é –≥—Ä—É —Ä–∞–Ω—ñ—à–µ (–∞–ª–µ —è –≤–∞–º —Ç–æ—á–Ω–æ –Ω–µ —Å–∫–∞–∂—É, –¥–µ –≤–æ–Ω–∞, –±–æ –¥—É–∂–µ —Ö–æ—á—É, —â–æ–± –≤–∏ —Ç–∞–Ω—Ü—é–≤–∞–ª–∏ –Ω–∞ —Ü—ñ–π –≤–µ—á—ñ—Ä—Ü—ñ –¥–æ —Ä–∞–Ω–∫—É). –ê —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–∏—Å–∞—Ç–∏—Å—è –¥–æ –¥—ñ-–¥–∂–µ—è, —è–∫–∏–π —Å—Ç–∞–≤–∏—Ç—å –º—É–∑–∏–∫—É –Ω–∞ —Ç–æ–º—É –±–æ—Ü—ñ (—Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞).

–í–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–µ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —ñ —á–µ—Å–Ω—ñ—Å—Ç—å –º–∏ –ø–æ–º–Ω–æ–∂–∏–º–æ –Ω–∞ —Å–ø–æ–≥–∞–¥–∏ —ñ –≥—É–º–æ—Ä. –ê –ø–æ–∫–∏ —â–æ —Ç—Ä–∏–º–∞–π—Ç–µ –≤ –≥–æ–ª–æ–≤—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ ‚Äì —Ö–µ–≤ —Ñ–∞–Ω - —ñ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è —á–∞—Å–æ–º, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–º —Ä–∞–∑–æ–º!`

		
		// menuIntro := &telebot.ReplyMarkup{}
		// menuExit := &telebot.ReplyMarkup{}

		// introBtnHelp := menuIntro.Data("üïπÔ∏è –•–µ–ª–ø", "help_menu")
		// introBtnSupport := menuIntro.URL("üïπÔ∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")
		// introBtnExit := menuIntro.Data("üïπÔ∏è –í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_%d", game.ID))

		// btnExactlyExit := menuIntro.Data("–í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_game_%d", game.ID))
		// btnReturnToGame := menuIntro.Data(" << –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "return_to_game")

		time.Sleep(600 * time.Millisecond) // Wait for 2 seconds before sending the next message
		//removeKeyboard := &telebot.ReplyMarkup{RemoveKeyboard: true}
		// menuIntro.Inline(
		// 	menuIntro.Row(introBtnHelp),
		// )
		 
		_, err = bot.Send(chat, msgTextStartGame)
		if err != nil {
			utils.Logger.Errorf("Error sending welcome start game message go the chat %s: %v", chat.Title, err)
			
		}

		storage_db.UpdateGameStatus(int64(game.ID), models.StatusGamePlaying)

		// Delay pause before sending tasks
		time.Sleep(cfg.Durations.TimePauseBeforeStartSendingTask)

		// Start sending tasks
		return SendTasks(bot, chat.ID)(c)
		//return utils.SafeHandlerWithMessage(FinishGameHandler(bot))(c)

	}
}

func handleHelpMenu(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()
	utils.Logger.WithFields(logrus.Fields{
		"source": "handleHelpMenu",
		"user_id": user.ID,
		"username": user.Username,
		"group": chat.Title,
	}).Info("Help menu button was pressed")

	menuIntro.Inline(
		menuIntro.Row(introBtnSupport),
		menuIntro.Row(introBtnExit),
	)
	// bot.EditReplyMarkup(c.Callback().Message, menuIntro)

	// time.Sleep(5 * time.Second) // Delay to allow user to read the message

	// 	menuIntro.Inline(
	// 		menuIntro.Row(introBtnHelp),
	// 	)

	// 	_, err := bot.EditReplyMarkup(msgStartGame, menuIntro)
	// 	if err != nil {
	// 		utils.Logger.WithFields(logrus.Fields{
	// 			"source": "StartGameHhandleHelpMenuandlerFoo",
	// 			"group": chat.Title,
	// 			"group_id": chat.ID,
	// 			"user_id": user.ID,
	// 			"username": user.Username,
	// 		}).Errorf("Failed to edit reply markup after exit game: %v", err)
	// 	}

	return nil
}

func handleExitConfirm(bot *telebot.Bot, c telebot.Context) error {
	utils.Logger.WithFields(logrus.Fields{
		"source": "handleExitConfirm",
		"user_id": c.Sender().ID,
		"username": c.Sender().Username,
		"group": c.Chat().Title,
	}).Info("Exit confirm button was pressed")

	user := c.Sender()
	chat := c.Chat()
	data := c.Callback().Data

	if strings.HasPrefix(data, "\fexit_") {
		gameIDStr := strings.TrimPrefix(data, "\fexit_")
		gameID, err := strconv.Atoi(gameIDStr)
		if err != nil {
			return nil
		}

		isUserInGame , err := storage_db.IsUserInGame(user.ID, gameID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user %s is in game: %v", user.Username, err)
			return nil
		}

		if !isUserInGame {
			msgTextUserIsNotInGame := fmt.Sprintf("–¢–∏ –Ω–µ –≤ –≥—Ä—ñ, @%s. –¢–æ–º—É –Ω–µ –º–æ–∂–µ—à –≤–∏–π—Ç–∏ –∑ –Ω–µ—ó ü§∑‚Äç‚ôÇÔ∏è", user.Username)

			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				msgmanager.TypeNotInGame, // unique message type
				msgTextUserIsNotInGame,
				cfg.Durations.TimeDeleteMsgYouAreNotInGame,
			)
			if err != nil {
				utils.Logger.Errorf("Error sending message that user %s is not in game: %v", user.Username, err)
			}


			return nil
		}

		roleUserInGame, err := storage_db.GetPlayerRoleByUserIDAndGameID(user.ID, gameID)
		if err != nil {
			utils.Logger.Errorf("Error getting player role for user %s in game %d: %v", user.Username, gameID, err)
			return nil
		}

		if roleUserInGame == "admin" {
			msgTextAdminExit := fmt.Sprintf("@%s –≥–µ–π —Ç–∏ —á–æ–≥–æ? –¢–∏ –∂ –∞–¥–º—ñ–Ω –≥—Ä–∏, –ª–∏—à–∞–π—Å—è —Ç—É—Ç.", user.Username)
			
			// Using MessageManager to Send with Anti-Duplicate Protection
			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				"admin_exit", // unique message type
				msgTextAdminExit,
				cfg.Durations.TimeDeleteMsgAdminExit,
			)

		
			if err != nil {
				utils.Logger.Errorf("Error sending message that admin %s cannot exit game: %v", user.Username, err)
			}

			return nil
		}

		msgTextExtit := fmt.Sprintf("–¢–æ—á–Ω–æ –≤–∏–π—Ç–∏, @%s?", user.Username)

						
		menuExit.Inline(
			menuExit.Row(btnExactlyExit),
			menuExit.Row(btnReturnToGame),
		)

		_, err = msgmanager.SendTemporaryMessage(
			chat.ID,
			user.ID,
			msgmanager.TypeExitSuccess, // unique message type
			msgTextExtit,
			cfg.Durations.TimeDeleteMsgAdminExit,
			menuExit,
		)
		if err != nil {
			utils.Logger.Errorf("Error sending exit game message to the chat %s: %v", chat.Title, err)
		}
	}
			
	return nil
}

func handleExitGame(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()
	data := c.Callback().Data

	if strings.HasPrefix(data, "\fexit_game_") {
		gameIDStr := strings.TrimPrefix(data, "\fexit_game_")
		gameID, err := strconv.Atoi(gameIDStr)
		if err != nil {
			return nil
		}

		isUserInGame , err := storage_db.IsUserInGame(user.ID, gameID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "handleExitGame",
				"group": chat.Title,
				"group_id": chat.ID,
				"user_id": user.ID,
				"username": user.Username,
			}).Errorf("Error checking if user %s is in game: %v", user.Username, err)
		}
		
		if !isUserInGame {
			msgTextUserIsNotInGame := fmt.Sprintf("@%s —Ç–∏ –∂ –≤–∂–µ –≤–∏–π—à–ª–∞ –∑ –≥—Ä–∏ ü§∑‚Äç‚ôÇÔ∏è", chat.Username)
			msgUserIsNotInGame, err := bot.Send(chat, msgTextUserIsNotInGame)
			if err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "handleExitGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Errorf("Error sending message that user %s is not in game: %v", chat.Username, err)
			}

			time.AfterFunc(cfg.Durations.TimeDeleteMsgYouAreNotInGame, func() {
				err := bot.Delete(msgUserIsNotInGame)
				if err != nil {
					utils.Logger.WithFields(logrus.Fields{
						"source": "handleExitGame",
						"group": chat.Title,
						"group_id": chat.ID,
						"user_id": user.ID,
						"username": user.Username,
					}).Errorf("Failed to delete message that user is not in game: %v", err)
				}
			})
		}

		storage_db.DeletePlayerFromGame(user.ID, gameID)

		err = bot.Delete(c.Callback().Message)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
					"source": "handleExitGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,		
				}).Errorf("Failed to delete message with exit confirmation: %v", err)
			return nil
		}

		msgTextExit := fmt.Sprintf("@%s –í–∏–¥–∞–ª–∏—Å—è —Å–∞–º (–æ–π, —è–∫ —à–∫–æ–¥–∞, –Ω—É –∂ —â–æ –±—É–≤–∞–π‚Ä¶.)", user.Username)
		_, err = bot.Send(chat, msgTextExit)
		if err != nil {
			utils.Logger.Errorf("Error sending exit message to the chat %s: %v", chat.Title, err)
		}

	}
			
	return nil
}

func handleReturnToGame(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()

	err := bot.Delete(c.Callback().Message)
	if err != nil {
		utils.Logger.WithFields(logrus.Fields{
			"source": "handleReturnToGame",
			"group": chat.Title,
			"group_id": chat.ID,
			"user_id": user.ID,
			"username": user.Username,
		}).Errorf("Failed to delete return to game message: %v", err)
		return nil
	}

	msgTextReturnToGame := fmt.Sprintf("@%s –í–∞—É, –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è", user.Username)
	msgReturnToGame, err := bot.Send(chat, msgTextReturnToGame)
	if err != nil {
		utils.Logger.Errorf("Error sending return to game message to the chat %s: %v", chat.Title, err)
	}

	time.AfterFunc(cfg.Durations.TimeDeleteMsgReturnToGame, func() {
		err := bot.Delete(msgReturnToGame)
		if err != nil {
			if strings.Contains(err.Error(), "message to delete not found") {
				utils.Logger.WithFields(logrus.Fields{
					"source": "handleReturnToGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Info("Message was already deleted earlier, skip deleting")
			} else {
				utils.Logger.WithFields(logrus.Fields{		
					"source": "handleReturnToGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Errorf("Failed to delete return to game message: %v", err)
			}
		}
	})
	// menuIntro.Inline(
	// 	menuIntro.Row(introBtnHelp),
	// )

	// _, err = bot.EditReplyMarkup(msgStartGame, menuIntro)
	// if err != nil {
	// 	utils.Logger.WithFields(logrus.Fields{
	// 		"source": "handleReturnToGame",
	// 		"group": chat.Title,
	// 		"group_id": chat.ID,
	// 		"user_id": user.ID,
	// 		"username": user.Username,
	// 	}).Errorf("Failed to edit reply markup after return to game: %v", err)
	// 	return nil
	// }
			
	return nil
}

func HandlerPlayerResponse(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		chat := c.Chat()
		msg := c.Message()

		// –üCheck: if the message is part of an album and has already been processed, ignore it
		if msg.AlbumID != "" {
			if _, exists := processedAlbums[msg.AlbumID]; exists {
				return nil
			}

			// Register the album and set it to clear after 2 minutes
			processedAlbums[msg.AlbumID] = time.Now()

			// Delay delete album ID for group media msg
			time.AfterFunc(cfg.Durations.TimeDeleteAlbumId, func() {
				delete(processedAlbums, msg.AlbumID)
			})
		}

		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "HandleUHandlerPlayerResponseserJoined",
				"chat_id": chat.ID,
				"user_called": user.Username,
			}).Errorf("Error getting game by chat ID: %v", err)
			
			return nil
		}

		statusUser, err := storage_db.GetStatusPlayer(user.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "HandlerPlayerResponse",
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
			}).Errorf("Error getting status player: %v", err)
		
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
				"source": "HandlerPlayerResponse",
				"username": user.Username,
				"group": chat.Title,
				"status_uer_from_DB": statusUser,
				"status_user_in_blocK_if": models.StatusPlayerWaiting+strconv.Itoa(game.CurrentTaskID),
			}).Info("Info about player and his status")
		
		userTaskID, _ := utils.GetWaitingTaskID(statusUser)

		playerResponse := &models.PlayerResponse{
				PlayerID:   user.ID,
				GameID: 	game.ID,
				TaskID:		userTaskID,
				HasResponse: true,
				Skipped: false,
			}

			storage_db.AddPlayerResponse(playerResponse)

			bot.Send(chat, fmt.Sprintf("–î—è–∫—É—é, @%s! –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è %d –ø—Ä–∏–π–Ω—è—Ç–∞.", user.Username, userTaskID))

			storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerNoWaiting)

		return nil
	}
}

// SendFirstTasks send all tasks in group chat
func SendTasks(bot *telebot.Bot, chatID int64) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		game, err := storage_db.GetGameByChatId(chatID)
	if err != nil {
		utils.Logger.WithFields(logrus.Fields{
			"siource": "SendTasks",
			"chat_id": chatID,
			"chat_name": game.Name,
		}).Errorf("Error getting game by chat ID: %v", err)
	
		return err
	}

    tasks, err := utils.LoadTasks("internal/data/tasks/tasks.json")
    if err != nil {
		    utils.Logger.Errorf("SendTasks logs: Error loading tasks: %v", err)
        return err
    }

    if len(tasks) == 0 {
		utils.Logger.Error("SendTasks logs: No tasks to send. Tasks's array is empty" )
		return nil
	}

    for i, task := range tasks {
        //task := tasks[i]
		storage_db.UpdateCurrentTaskID(game.ID, task.ID)
        msg := "üåü *" + task.Tittle + "*\n" + task.Description

		// create buttons Answer and Skip
		inlineKeys := &telebot.ReplyMarkup{} // initialize inline keyboard

		answerBtn := inlineKeys.Data("–•–æ—á—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", "answer_task", fmt.Sprintf("waiting_%d", task.ID))
		skipBtn := inlineKeys.Data("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "skip_task", fmt.Sprintf("skip_%d", task.ID))

		inlineKeys.Inline(
			inlineKeys.Row(answerBtn, skipBtn),
		)

        _, err := bot.Send(
            &telebot.Chat{ID: chatID},
            msg,
			inlineKeys,
            telebot.ModeMarkdown,
        )
        if err != nil {
            return err
        }

		if i < len(tasks)-1 {
			// Delay pause between sending tasks
			time.Sleep(cfg.Durations.TimePauseBetweenSendingTasks) // await some minutes or hours before sending the next task
		}

    }

	return FinishGameHandler(bot)(c)

	}
	
}

func FinishGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "FinishGameHandler",
				"group": chat.Title,
				"err": err,
			}).Error("Finish game handler called")
			
			return nil
		}
		
		utils.Logger.WithFields(logrus.Fields{
			"source": "FinishGameHandler",
			"group": chat.Title,
		}).Info("Finish game handler called")

		// Final game. Future - function of final game will be here run
		finishMsg := `‚ú® –û º–∫–µ–π, –±–æ–≥–∏–Ω—ñ –¥—Ä—É–∂–±–∏, —Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ ‚Äî –í–ò –ü–†–û–ô–®–õ–ò –¶–ï–ô –®–õ–Ø–• –†–ê–ó–û–ú! ‚ú®

–Ø —Ö–æ—á—É, —â–æ–± –≤–∏ –∑–∞—Ä–∞–∑ –Ω–∞ —Å–µ–∫—É–Ω–¥—É –≤—ñ–¥—ñ—Ä–≤–∞–ª–∏—Å—è –≤—ñ–¥ –µ–∫—Ä–∞–Ω—É, –∑—Ä–æ–±–∏–ª–∏ –≥–ª–∏–±–æ–∫–∏–π –≤–¥–∏—Ö —ñ —É—Å–≤—ñ–¥–æ–º–∏–ª–∏: –í–ò –ù–ï–ô–û–í–Ü–†–ù–Ü! –ù–µ —Ç–æ–º—É, —â–æ –≤–∏–∫–æ–Ω–∞–ª–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ö–æ—á–∞ —Ü–µ —Ç–µ–∂ –∫—Ä—É—Ç–æ!), –∞ —Ç–æ–º—É, —â–æ –≤–∏ —Å—Ç–≤–æ—Ä—é—î—Ç–µ –ø—Ä–æ—Å—Ç—ñ—Ä, –¥–µ –º–æ–∂–Ω–∞ –±—É—Ç–∏ —Å–æ–±–æ—é. –î–µ –º–æ–∂–Ω–∞ –Ω–∏—Ç–∏, –º—Ä—ñ—è—Ç–∏, —Ä–µ–≥–æ—Ç–∞—Ç–∏, –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏, –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏—Å—è —ñ –±—É—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é. –í–∏ –¥–∞—î—Ç–µ –æ–¥–Ω–∞ –æ–¥–Ω—ñ–π —Å–≤–æ—é —É–≤–∞–≥—É, —á–∞—Å —ñ –º–µ–Ω—Ç–∞–ª—å–Ω—ñ –æ–±–Ω—ñ–º–∞—à–∫–∏.¬†
	
–Ü —Ü–µ —Ç–æ—á–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–æ–º–µ–Ω—Ç, —â–æ–± –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ –≤—Å–µ—Å–≤—ñ—Ç—É –∑–∞ –í–ê–°! –°–µ—Ä–π–æ–∑–Ω–æ, –≤ —Å–≤—ñ—Ç—ñ 8 –º—ñ–ª—å—è—Ä–¥—ñ–≤ –ª—é–¥–µ–π, –∞ –≤–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏ —Å–≤–æ—ó—Ö —Å–µ—Å—Ç–µ—Ä –ø–æ –¥—É—Ö—É —ñ –∑–º–æ–≥–ª–∏ –ø—Ä–æ–Ω–µ—Å—Ç–∏ —Ü—é –¥—Ä—É–∂–±—É –∫—Ä—ñ–∑—å —Ä–æ–∫–∏ –ø–æ–ø—Ä–∏ –≤—Å–µ! –¶–µ –º–∞–≥—ñ—è, —Ü–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —ñ —Ü–µ –≤–¥—è—á–Ω—ñ—Å—Ç—å. –ë–µ—Ä–µ–∂—ñ—Ç—å —Ü—é –±—É–ª–æ—á–∫—É –∑ —Ä–æ–¥–∑–∏–Ω–∫–∞–º–∏ ‚Äî –≤–æ–Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∞.üíõ
	
–Ø —Å–ø–æ–¥—ñ–≤–∞—é—Å—è, —â–æ —Ü–µ–π –¥–æ—Å–≤—ñ–¥ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É –≤–∏–≥–ª—è–¥—ñ —á–∞—Ç–∏–∫—É, –∞ —è–∫ —Ç–µ–ø–ª–µ —Ç—Ä—ñ–ø–æ—Ç—ñ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ: —É –º–µ–Ω–µ —î –º–æ—ó –ª—é–¥–∏. –Ü —Ü–µ ‚Äî –±–µ–∑—Ü—ñ–Ω–Ω–æ.
–Ü, –∑–≤—ñ—Å–Ω–æ, —Ü–µ–π –∫–≤–µ—Å—Ç –Ω–µ –º–∞—î –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è! –¢–æ–º—É —â–æ –¥—Ä—É–∂–±–∞ ‚Äî —Ü–µ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∞ —ñ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –ø—Ä–∏–≥–æ–¥–∞.
	
–¢–µ–ø–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è: –∫–æ–ª–∏ —ñ –¥–µ –≤–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç–µ—Å—è, —â–æ–± –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –ø–µ—Ä–µ–º–æ–≥—É, –∑—ñ—Ä–æ–Ω—å–∫–∏? ü•Ç üòâ`
		
		_, err = bot.Send(&telebot.Chat{ID: chat.ID}, finishMsg)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "FinishGameHandler",
				"group": chat.Title,
				"err": err,
			}).Error("Error sending final message to the group")
		}

		storage_db.UpdateGameStatus(int64(game.ID), models.StatusGameFinished)

		return nil
	}
}

// Handler for answering a task
func OnAnswerTaskBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		chat := c.Chat()
		dataButton := c.Data()
		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error getting game by chat ID (%d): %v", chat.ID, err)
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
			"source": "OnAnswerTaskBtnHandler",
			"username": user.Username,
			"group": chat.Title,
			"data_button": dataButton,
		}).Infof("User click to button WantAnswer to task %v", dataButton)

		userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user is in game: %v", err)
			return nil
		}
		if !userIsInGame {
			SendJoinGameReminder(bot)(c)

			return nil
		}

		idTask, err := utils.GetWaitingTaskID(dataButton)
		if err != nil {
			utils.Logger.Errorf("Error getting task ID from data button: %v", err)
		}

		status, err := storage_db.CheckPlayerResponseStatus(user.ID, game.ID, idTask)
		if err != nil {
			utils.Logger.Errorf("Error checking player response status: %v", err)
			return nil
		}

		switch {
		case status.AlreadyAnswered:
			textYouAlreadyAnswered := fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòÖ", user.Username)
			msgYouAlreadyAnswered, err := bot.Send(chat, textYouAlreadyAnswered)
			if err != nil {
				utils.Logger.Errorf("Error sending message that user %s already answered task %d: %v", user.Username, idTask, err)
			}

			time.AfterFunc(cfg.Durations.TimeDeleteMsgYouAlreadyAnswered, func() {
				err = bot.Delete(msgYouAlreadyAnswered)
				if err != nil {
					utils.Logger.WithFields(logrus.Fields{
						"source": "OnAnswerTaskBtnHandler",
						"username": user.Username,
						"group": chat.Title,
						"data_button": dataButton,
						"task_id": idTask,
					}).Errorf("Error deleting message that user %s already answered task %d: %v", user.Username, idTask, err)
				}
			})

			//return c.Send(fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòâ", user.Username))
		case status.AlreadySkipped:
			return c.Send(fmt.Sprintf("@%s, —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∏ –≤–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ üòÖ", user.Username))
		}

		storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerWaiting+strconv.Itoa(idTask))

		msg := fmt.Sprintf("@%s, —á–µ–∫–∞—é –≤—ñ–¥ —Ç–µ–±–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è %d", user.Username, idTask)
		awaitingAnswerMsg, err := bot.Send(chat, msg)
		if err != nil {
			utils.Logger.Errorf("Error sending message: %v", err)
		}

		// Delay delete msg awaiting answer
		time.AfterFunc(cfg.Durations.TimeDeleteMsgAwaitingAnswer, func() {
			err = bot.Delete(awaitingAnswerMsg)
			if err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "OnAnswerTaskBtnHandler",
					"username": user.Username,
					"group": chat.Title,
					"data_button": dataButton,
					"task_id": idTask,
				}).Errorf("Error deleting answer task message for user %s in the group %s: %v", chat.Username, chat.Title, err)
			}
		})

		return nil
	}
}

// Handler for skipping a task
func OnSkipTaskBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		utils.Logger.Info("OnSkipTaskHandler called")

		user := c.Sender()
		chat := c.Chat()
		dataButton := c.Data()
		game, _ := storage_db.GetGameByChatId(chat.ID)
		//statusUser, err := storage_db.GetStatusPlayer(user.ID)
		userTaskID, err := utils.GetSkipTaskID(dataButton)
		if err != nil {
			utils.Logger.Errorf("Error getting skip task ID from data button: %v", err)
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
			"source": "OnSkipTaskBtnHandler",
			"user": user.Username,
			"group": chat.Title,
			"data_button": dataButton,
			"skip_task_id": userTaskID,
		}).Infof("User click to button SkipTask from tasl %v", dataButton)

		userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user is in game: %v", err)
			return nil
		}
		if !userIsInGame {
			SendJoinGameReminder(bot)(c)

			return nil
		}

		status, err := storage_db.SkipPlayerResponse(user.ID, game.ID, userTaskID)
		if err != nil {
			utils.Logger.Errorf("Error skipping task %d bu user: %v. %v", userTaskID, user.Username, err)
			return nil
		}

		switch {
		case status.AlreadyAnswered:
			bot.Send(chat, fmt.Sprintf("üìù @%s, —Ç–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è.", user.Username))
		case status.AlreadySkipped:
			bot.Send(chat, fmt.Sprintf("‚è≠Ô∏è @%s, —Ç–∏ –≤–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è.", user.Username))
		case status.SkipLimitReached:
			msg, _ := bot.Send(chat, fmt.Sprintf("üö´ @%s, —Ç–∏ –≤–∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–∑–≤–æ–ª–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å.", user.Username))
			
			// Delay delete the message max skip tasks
			time.AfterFunc(cfg.Durations.TimeDeleteMsgMaxSkipTasks, func() {
				err = bot.Delete(msg)
				if err != nil {
					utils.Logger.Errorf("Error deleting skip limit reached message for user %s: %v", user.Username, err)
				}
			})
		default:
			bot.Send(chat, fmt.Sprintf("‚úÖ @%s, –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ! –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å %d –ø—Ä–æ–ø—É—Å–∫(—ñ–≤).", user.Username, status.RemainingSkips-1))
		}

		return nil
	}
}

func RegisterCallbackHandlers(bot *telebot.Bot) {
	bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
		data := c.Callback().Data

		utils.Logger.WithFields(logrus.Fields{
			"source": "RegisterCallbackHandlers",
			"data": data,
			"user_id": c.Sender().ID,
			"username": c.Sender().Username,
			"group": c.Chat().Title,
		}).Info("Callback handler called")

		switch {
		case strings.HasPrefix(data, "\fexit_game_"):
			return handleExitGame(bot, c)
		case strings.HasPrefix(data, "\fexit_"):
			return handleExitConfirm(bot, c)
		// case data == "support_menu":
		// 	return handleSupportMenu(bot, c)
		case data == "\fhelp_menu":
			return handleHelpMenu(bot, c)
		case data == "\freturn_to_game":
			return handleReturnToGame(bot, c)
		// case strings.HasPrefix(data, "\fphoto_choice_"):
		// 	return HandlePhotoChoice(bot)(c)
		default:
			return nil
		}
	})
}