package handlers

import (
	"encoding/json"
	"fmt"

	//"log"
	//"image"

	// "image/color"
	// "image/draw"
	//"image/jpeg"
	//"io"
	//"math"
	//"path/filepath"

	//"os"
	"strconv"

	"strings"
	"time"

	"github.com/ArtemHvozdov/tg-game-bot.git/config"
	"github.com/ArtemHvozdov/tg-game-bot.git/internal/msgmanager"
	"github.com/ArtemHvozdov/tg-game-bot.git/internal/subtasks"
	"github.com/ArtemHvozdov/tg-game-bot.git/models"
	"github.com/ArtemHvozdov/tg-game-bot.git/pkg/btnmanager"
	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"
	"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	//"github.com/fogleman/gg"

	//"github.com/fogleman/gg"
	"github.com/sirupsen/logrus"

	//"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	"gopkg.in/telebot.v3"
)

// Photo task session state
type PhotoTaskSession struct {
    UserID          int64
    CurrentQuestion int
    IsActive        bool
    QuestionMsgID   int
    AlbumMsgIDs     []int
    StartedAt       time.Time
}

// Photo questions
// var photoQuestions = []string{
//     "üì∏ –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –º—ñ—Å—Ü—è, –¥–µ —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –ø—Ä–æ–≤–æ–¥–∏—à —á–∞—Å –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏",
//     "üåÖ –ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ, —è–∫–µ –ø–µ—Ä–µ–¥–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –≤–∞—à–æ—ó –¥—Ä—É–∂–±–∏",
//     "üíù –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–µ—á—ñ, —è–∫–∞ –Ω–∞–≥–∞–¥—É—î —Ç–æ–±—ñ –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ –º–æ–º–µ–Ω—Ç–∏ –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏",
// }

var processedAlbums = make(map[string]time.Time) // processedAlbums keeps track of AlbumIDs that were already handled,
												 // to prevent sending multiple acknowledgments for a single album.

var cfg = config.LoadConfig()

var (
	//joinReminderMessages = make(map[int64]int)
	//joinReminderMutex = sync.Mutex{}

	menuIntro *telebot.ReplyMarkup
	menuExit  *telebot.ReplyMarkup

	introBtnHelp     telebot.Btn
	introBtnSupport  telebot.Btn
	introBtnExit     telebot.Btn
	btnExactlyExit   telebot.Btn
	btnReturnToGame  telebot.Btn

	joinedMessages []string
	finishMessage string
	buyMeCoffeeMsg string
	feedbackMsg string
	referalMsg string
	socialMediaLinks map[string]string
	wantAnswerMessages []string
	alreadyAnswerMessages []string
	staticMessages map[string]string
	skipMessages map[string]string
	startGameMessages []string
)

func InitLoaderMessages() {
	var err error
	joinedMessages, err = utils.LoadTextMessagges("internal/data/messages/group/hello_msgs/hello_msgs.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load join messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d join messages joinedMessages", len(joinedMessages))	
	}

	wantAnswerMessages, err = utils.LoadTextMessagges("internal/data/messages/group/want_answer_msgs/want_answer_msgs.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load want answer messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d want answer messages wantAnswerMessages", len(wantAnswerMessages))	
	}

	alreadyAnswerMessages, err = utils.LoadTextMessagges("internal/data/messages/group/already_answer_msgs/already_answer_msgs.json")	
	if err != nil {
		utils.Logger.Errorf("Failed to load already answer messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d already answer messages alreadyAnswerMessages", len(alreadyAnswerMessages))	
	}

	staticMessages, err = utils.LoadMessageMap("internal/data/messages/group/static_msgs/static_msgs.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load static messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d static messages", len(staticMessages))
	}

	skipMessages, err = utils.LoadMessageMap("internal/data/messages/group/skip_msgs/skip_msgs.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load skip messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d skip messages", len(skipMessages))
	}

	startGameMessages, err = utils.LoadTextMessagges("internal/data/messages/group/start_game_msgs/start_game_msgs.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load start game messages: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d start game messages", len(startGameMessages))
	}

	finishMessage, err = utils.LoadSingleMessage("internal/data/messages/group/finish_game_msg.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load finish message: %v", err)
	} else {
		utils.Logger.Info("Loaded finish message: succes")
	}

	buyMeCoffeeMsg, err = utils.LoadSingleMessage("internal/data/messages/group/buy_me_coffee_msg.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load buy me coffee message: %v", err)
	} else {
		utils.Logger.Info("Loaded buy me coffee message: succes")
	}

	feedbackMsg, err = utils.LoadSingleMessage("internal/data/messages/group/feedback_msg.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load feedback message: %v", err)
	} else {
		utils.Logger.Info("Loaded feedback message: succes")
	}

	referalMsg, err = utils.LoadSingleMessage("internal/data/messages/group/referal_msg.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load referal message: %v", err)
	} else {
		utils.Logger.Info("Loaded referal message: succes")
	}

	socialMediaLinks, err = utils.LoadMessageMap("internal/data/messages/group/social_media_links.json")
	if err != nil {
		utils.Logger.Errorf("Failed to load social media links: %v", err)
	} else {
		utils.Logger.Infof("Loaded %d social media links", len(socialMediaLinks))
	}
}

func InitButtons(gameID int) {
	menuIntro = &telebot.ReplyMarkup{}
	menuExit = &telebot.ReplyMarkup{}

	introBtnHelp = menuIntro.Data("–•–µ–ª–ø", "help_menu")
	//introBtnSupport = menuIntro.URL("–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")
	introBtnSupport = btnmanager.Get(menuIntro, models.UniqueSupport)
	//introBtnExit = menuIntro.Data("–í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_%d", gameID))
	introBtnExit = btnmanager.Get(menuIntro, models.UniqueExitGame, gameID)

	//btnExactlyExit = menuExit.Data("–¢–æ—á–Ω–æ –≤–∏–π—Ç–∏", fmt.Sprintf("exit_game_%d", gameID))
	btnExactlyExit = btnmanager.Get(menuExit, models.UniqueExactlyExit, gameID)
	//btnReturnToGame = menuExit.Data(" << –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "return_to_game")
	btnReturnToGame = btnmanager.Get(menuExit, models.UniqueReturnToGame)

	menuIntro.Inline(menuIntro.Row(introBtnHelp))
	menuExit.Inline(menuExit.Row(btnExactlyExit), menuExit.Row(btnReturnToGame))
}

func StartHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		//chat := c.Chat()
		user := c.Sender()
		
		utils.Logger.WithFields(logrus.Fields{
			"user_id": user.ID,
			"username": user.Username,
		}).Info("User started the bot")

		startMsg := `–û–£, –ü–†–ò–í–Ü–¢ –ó–Ü–†–û–ù–¨–ö–û! üåü

–•–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –¥–ª—è —Å–≤–æ—ó—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–æ–¥—Ä—É–≥? –õ–æ–≤–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–∞–≥—ñ—é‚ú®:

‚ûä –°—Ç–≤–æ—Ä–∏ –≥—Ä—É–ø—É –∑ –£–°–Ü–ú–ê –ø–æ–¥—Ä—É–≥–∞–º–∏, –∑ —è–∫–∏–º–∏ —Ö–æ—á–µ—à –≥—Ä–∞—Ç–∏!
(–ù–µ –∑–∞–±—É–¥—å –Ω—ñ–∫–æ–≥–æ! –ü—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞—Ç–∏ –≤–∂–µ –Ω–µ –≤–∏–π–¥–µ üò¨)

‚ûã –î–æ–¥–∞–π —Ç–∞–∫–æ–∂ —ñ –º–µ–Ω–µ ‚Äî @bestie_game_bot ‚Äî —è —Ç–≤–æ—è –≤–µ–¥—É—á–∞, —Ö–µ-—Ö–µ üòé

‚ûå –ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ —ñ –Ω–∞–∑–≤—É –¥–ª—è –≥—Ä—É–ø–∏! –¶–µ –Ω–µ must-have, –∞–ª–µ —Ç–∞–∫ —Ñ–∞–Ω–æ–≤—ñ—à–µ ü§™

‚ûç –î–æ—á–µ–∫–∞–π—Å—è, –ø–æ–∫–∏ –≤—Å—ñ –ø–æ–¥—Ä—É–∂–∫–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç—å ‚Äú–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏‚Äù 
(–Ω–µ —Ç–∏—Å–Ω–∏ ‚Äú–ü–æ—á–∞—Ç–∏ –≥—Ä—É‚Äù, –ø–æ–∫–∏ –Ω–µ –∑—ñ–±—Ä–∞–ª–∏—Å—å —É—Å—ñ ‚ùóÔ∏è)

‚ûé –ö–æ–ª–∏ –£–°–Ü –ø—Ä–∏—î–¥–Ω–∞—é—Ç—å—Å—è ‚Äî —Ç–∏—Å–Ω–∏ ‚Äú–ü–æ—á–∞—Ç–∏ –≥—Ä—É‚Äù! üöÄ
–¶–µ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–∏, –±–æ —Ç–∏ —Ç—É—Ç ‚Äî –±–æ—Å—Å! üíÖüëë

–Ü‚Ä¶ let the madness begin! üíÉüéâ

ps  –ú–∞—î—à–µ —Ç—Ä—É–¥–Ω–æ—â—ñ? –¢–æ–¥—ñ –ø–∏—à–∏ —Å—é–¥–∏`

		startMenu := &telebot.ReplyMarkup{}
		//startBtnSupport := startMenu.URL("üïπÔ∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")

		startBtnSupport := btnmanager.Get(startMenu, models.UniqueSupport)

		startMenu.Inline(
			startMenu.Row(startBtnSupport),
		)

		return c.Send(startMsg, startMenu)
 	}
}

func TestRunHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		utils.Logger.Info("Test mode is running")

		SetupGameHandler(bot)(c)

		return nil
	}
}

/// Handler create game
func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		//userAdmin := c.Sender()
		gameStartMsg := `–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:
1. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø—É
2. –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ —Ü—é –≥—Ä—É–ø—É –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω–∞
3. –£ –≥—Ä—É–ø—ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /check_admin_bot`

		user := c.Sender()
		utils.Logger.Info("CreateGameHandler buton's logs: User:", user.Username, user.ID)
    	
		if err := c.Send(gameStartMsg); err != nil {
			return err
		}

    return nil
	}
}

func HandleBotAddedToGroup(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()
		
		utils.Logger.WithFields(logrus.Fields{
			"source": "HandleAddedToGroup",
			"user:": user.Username,
			"user_id": user.ID,
			"group": chat.Title,
			"group_id": chat.ID,
		}).Info("The user added the bot to the group manually")
		
		// btnStartGame := telebot.Btn{Text: "–ü–æ—á–∞—Ç–∏ –≥—Ä—É"}

		SetupGameHandler(bot)(c)

		return nil
	}

}


// Handler join to game
func JoinGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		
		return c.Send("–¢–≤–æ—ó –ø–æ–¥—Ä—É–≥–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –≥—Ä–∏? üè† –¢–æ–¥—ñ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")
	}
}

func HelpMeHandler(bot *telebot.Bot) func (c telebot.Context) error {
	return func(c telebot.Context) error {
		helpText := `
			–ü—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –Ø –±–æ—Ç –¥–ª—è —ñ–≥–æ—Ä –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏ –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ –±–æ—Ç–∞ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É –∞–±–æ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

–í –≥—Ä—ñ —Ç–∏ –º–æ–∂–µ—à:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
- –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∏)
- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥—Ä—É–∑—ñ–≤

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–•–µ–ª–ø –º—ñ" –≤ –º–µ–Ω—é!
		`
		return c.Send(helpText)
	}
}

// SetupGameHandler handles the /check_admin_bot command
func SetupGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()
	
		utils.Logger.WithFields(logrus.Fields{
			"source": "SetupGameHandler",
			"user_id": user.ID,
			"username": user.Username,
			"group": chat.Title,
			"group_id": chat.ID,
		}).Infof("Start creating game in the group (%d | %s)", chat.ID, chat.Title)
		
		gameName := chat.Title
	
		game, err := storage_db.CreateGame(gameName, chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error creating game %s in the group %s: %v", gameName, chat.Title, err)
		}

		playerAdmin := &models.Player{
			ID: user.ID,
			UserName: user.Username,
			Name: user.FirstName,
			Status:   models.StatusPlayerNoWaiting,
			Skipped:  0,
			GameID: game.ID,
			Role: "admin",
		}
		
		if err := storage_db.AddPlayerToGame(playerAdmin); err != nil {
			utils.Logger.Errorf("Failed to add player-admin (%d | %s) to game %s: %v", playerAdmin.ID, playerAdmin.UserName, gameName, err)
			return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
		}

		InitButtons(game.ID)

		// joinBtn := telebot.InlineButton{
		// 	Unique: "join_game_btn",
		// 	Text:   "üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏",
		// }

		//joinBtn := menuIntro.Data("üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "join_game_btn")
		joinBtn := btnmanager.Get(menuIntro, models.UniqueJoinGameBtn)
		
		//inline := &telebot.ReplyMarkup{}
		// inline.InlineKeyboard = [][]telebot.InlineButton{
		// 	{joinBtn},
		// 	{introBtnSupport},
		// 	{introBtnExit},
		// }

		menuIntro.Inline(
			menuIntro.Row(joinBtn),     // Join button
			menuIntro.Row(introBtnSupport),  // Support button  
			menuIntro.Row(introBtnExit),     // Exit button
		)

		//msgJoin, _ := bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", inline)
		//bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", inline)

		//bot.Send(chat, "–•–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏? üè† –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É", menuIntro)
		bot.Send(chat, utils.GetStaticMessage(staticMessages, models.MsgInviteToJoinGame), menuIntro)
				
		// Delay pause between start game msg and join msg 
		time.Sleep(cfg.Durations.TimePauseMsgStartGameAndMsgJoinGame)

		// Version with Inline Button
		menu := &telebot.ReplyMarkup{}
		//btnStartGame := menu.Data("–ü–æ—á–∞—Ç–∏ –≥—Ä—É", "start_game")
		btnStartGame := btnmanager.Get(menu, models.UniqueStartGame)
		menu.Inline(menu.Row(btnStartGame))

		// bot.Handle(&btnStartGame, func(c telebot.Context) error {
		// 	StartGameHandlerFoo(bot)(c)

		// 	return nil
		// })

		bot.Send(chat, utils.GetStaticMessage(staticMessages, models.MsgAdminStartGameBtn), menu)

		return nil
	}
}

func JoinBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return  func(c telebot.Context) error {
			user := c.Sender()
			chat := c.Chat()

			utils.Logger.Info("Join btn handler was called. New funcion")
      
			utils.Logger.WithFields(logrus.Fields{
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
				"group_id": chat.ID,
		  	}).Info("Inline button was called for joined to game")

			// Get game by chat ID
			game, err := storage_db.GetGameByChatId(chat.ID)
			if err != nil {
				utils.Logger.Errorf("Game not found for chat %d: %v", chat.ID, err)
				return c.Respond(&telebot.CallbackResponse{Text: "–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"})
			}

			userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
			if err != nil {
				utils.Logger.Errorf("Failed to check if user %s is in game: %v", chat.Username, err)
				return nil
			}

			if userIsInGame {
				roleUserInGame, err := storage_db.GetPlayerRoleByUserIDAndGameID(user.ID, game.ID)
				if err != nil {
					utils.Logger.Errorf("Failed to get player role for user %s in game %d: %v", user.Username, game.ID, err)
					return nil
				}

				switch roleUserInGame {
				case "admin":
					msg, err := bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgAdminWantToJoinGame), user.Username))
					if err != nil {
						utils.Logger.Errorf("Failed to send message for user %s: %v", user.Username, err)
						return nil
					}

					// Delay delete msg user is in game aready. Future: change time to 5 cseconds
					time.Sleep(cfg.Durations.TimeDeleteMsgUserIsAlreadyInGame)

					err = bot.Delete(msg)
					if err != nil {
						utils.Logger.Errorf("Failed to delete message for user %s: %v", user.Username, err)
						return nil
					}
					return nil
				case "player":
					msg, err := bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUsaulPlayerWantToJoinGame), user.Username))
					if err != nil {
						utils.Logger.Errorf("Failed to send message for user %s: %v", user.Username, err)
						return nil
					}

					// Delay delete msg user is in game aready. Future: change time to 5 cseconds
					time.Sleep(cfg.Durations.TimeDeleteMsgUserIsAlreadyInGame)

					err = bot.Delete(msg)
					if err != nil {
						utils.Logger.Errorf("Failed to delete message for user %s: %v", user.Username, err)
						return nil
					}
					return nil
				}

				// msg, err := bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUsaulPlayerWantToJoinGame), user.Username))
				// if err != nil {
				// 	utils.Logger.Errorf("Failed to send message for user %s: %v", user.Username, err)
				// 	return nil
				// }

				// // Delay delete msg user is in game aready. Future: change time to 5 cseconds
				// time.Sleep(cfg.Durations.TimeDeleteMsgUserIsAlreadyInGame)

				// err = bot.Delete(msg)
				// if err != nil {
				// 	utils.Logger.Errorf("Failed to delete message for user %s: %v", user.Username, err)
				// 	return nil
				// }
				// return nil
			}

			player := &models.Player{
				ID:       user.ID,
				UserName: user.Username,
				Name:     user.FirstName,
				Status:   models.StatusPlayerNoWaiting,
				Skipped:  0,
				GameID:   game.ID,
				Role:     "player",
			}

			if err := storage_db.AddPlayerToGame(player); err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "CheckAdminHandler",
					"player:": player.UserName,
					"player_id": player.ID,
					"game_id": game.ID,
				}).Error("Failed to add player to game")
				return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è üò¢"})
			}

			// statusGame := game.Status
			// if statusGame == models.StatusGamePlaying {
			// 	err := bot.Delete(c.Callback().Message)
			// 	if err != nil {
			// 		utils.Logger.Errorf("Failed to delete message with join button: %v", err)
			// 		return nil
			// 	}
			// }

			// joinedMessages1, err := utils.LoadTextMessagges("internal/data/messages/group/hello_messages/hello_messages.json")
			// if err != nil {
			// 	utils.Logger.Errorf("Failed to load join messages: %v", err)
			// 	return nil
			// }

			//msg, err := bot.Send(chat, fmt.Sprintf("‚ú® @%s –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!", user.Username))
			_, err = bot.Send(chat, fmt.Sprintf(utils.GetRandomMsg(joinedMessages), user.Username))
			if err != nil {
				utils.Logger.Errorf("Failed to send join message for user %s: %v", user.Username, err)
				return nil
			}

			return c.Respond(&telebot.CallbackResponse{Text: "–¢–∏ –≤ –≥—Ä—ñ! üéâ"})
	}
}

func SendJoinGameReminder(bot *telebot.Bot) func (c telebot.Context) error {
	return func (c telebot.Context) error {
		//userID := c.Sender().ID
		chat := c.Chat()
		user := c.Sender()

		// joinReminderMutex.Lock()
		// defer joinReminderMutex.Unlock()

		// // Checking to see if there has already been a message
		// if msgID, ok := joinReminderMessages[user.ID]; ok && msgID != 0 {
		// 	// Trying to get this message (or just not sending it again)
		// 	// In Telebot, you can't get a message by ID, so we'll check by trying to delete it
		// 	err := bot.Delete(&telebot.Message{ID: msgID, Chat: c.Chat()})
		// 	if err == nil {
		// 		// There was an old message - it's still alive, let's exit
		// 		utils.Logger.Infof("Join reminder message already exists for user %d", user.ID)
		// 		return nil
		// 	} else if !strings.Contains(err.Error(), "message to delete not found") {
		// 		utils.Logger.Warnf("Failed to delete existing join reminder: %v", err)
		// 		// In any case, we remove it from the map
		// 		delete(joinReminderMessages, user.ID)
		// 	}
		// }

		// joinBtn := telebot.InlineButton{
		// 	Unique: "join_game_btn",
		// 	Text:   "üé≤ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏",
		// }
		// inline := &telebot.ReplyMarkup{}
		// inline.InlineKeyboard = [][]telebot.InlineButton{
		// 	{joinBtn},
		// }

		msgText := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUserIsNotInGame), user.Username)
		_, err := msgmanager.SendTemporaryMessage(
			chat.ID, 
			user.ID, 
			msgmanager.TypeReminderJoinGame, 
			msgText, 
			cfg.Durations.TimeDeleteMsgJoinGamerReminder,
		)
		if err != nil {
			utils.Logger.Errorf("Error sending reminder joint to game msg for user %s in the chat (%s | %d)", user.Username, chat.Title, chat.ID)
		}

		return nil
	}
}

func GenerateChatInviteLink(bot *telebot.Bot, chat *telebot.Chat) (string, error) {
	params := map[string]interface{}{
		"chat_id": chat.ID,
	}

	raw, err := bot.Raw("exportChatInviteLink", params)
	if err != nil {
		utils.Logger.Errorf("Error generating invite link for the group %s: %v", chat.Title, err)
		return "", fmt.Errorf("failed to export chat invite link: %w", err)
	}

	// Struct of response Telegram API
	var result struct {
		Result string `json:"result"`
	}

	err = json.Unmarshal(raw, &result)
	if err != nil {
		utils.Logger.Errorf("Error parsing invite link for the group %s response: %v", chat.Title, err)
		return "", fmt.Errorf("failed to parse invite link response: %w", err)
	}

	return result.Result, nil
}

// SendStartGameMessages sends the start game messages to the game chat
func SendStartGameMessages(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()

		msg1 := startGameMessages[0]
		msg2 := startGameMessages[1]

		if _, err := bot.Send(chat, msg1, telebot.ModeMarkdown); err != nil {
			return err
		}

		if _, err := bot.Send(chat, msg2, telebot.ModeMarkdown); err != nil {
			return err
		}

		return nil
	}
}


// StartGameHandlerFoo handles the "start_game" button press in a group chat
func StartGameHandlerFoo(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		user := c.Sender()

		utils.Logger.WithFields(logrus.Fields{
			"user_id": user.ID,
			"username": user.Username,
			"group": chat.Title,
		}).Infof("Start game handler called by %s", user.Username)

		memberUser, _ := bot.ChatMemberOf(chat, user)

		if memberUser.Role != telebot.Administrator && memberUser.Role != telebot.Creator {
			warningMsgText := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgOnlyAdminCanStartGame), user.Username)
			
			utils.Logger.WithFields(logrus.Fields{
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
			}).Warn("Click to button /start_game, user is not admin in the group, tha can't start game")

			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				msgmanager.TypeGameStart,
				warningMsgText,
				cfg.Durations.TimeDeleteMsgOnlyAdmniCanStartGame,
			)
			if err != nil {
				utils.Logger.Errorf("Error sending warning message about start game in the chat: %v", err)
			}			
			
			return nil
		}

		// Delete message with button "Start game" after click
		go func ()  {
			err := bot.Delete(c.Message())
			if err != nil {
			utils.Logger.Errorf("Failed to delete message with button: %v", err)
			}
		}()

		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error getting game by chat ID(%d): %v", chat.ID, err)
			return c.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É.")
		}

		utils.Logger.Infof("Game (%s) status: %s", game.Name, game.Status)

		// Checking: this have to be a group chat
		if chat.Type == telebot.ChatPrivate {
			c.Send("–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ üßë‚Äçü§ù‚Äçüßë")
			return nil
		}

		if game.Status == models.StatusGamePlaying {
			msgText := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgAdminGameAlreadyStarted), user.Username)
			msg, err := bot.Send(chat, msgText)
			if err != nil {
				utils.Logger.Errorf(
					"Error sending message that game %s has already started for user (%d | %s): %v", game.Name, user.ID, user.Username, err,
				)
			}

			// Delay delete msg you already srarted game
			time.Sleep(cfg.Durations.TimeDeleteMsgYouAlreadyStartedGame)
			err = bot.Delete(msg)
			if err != nil {
				utils.Logger.Errorf(
					"Error deleting message that game %s has already started for user (%d | %s): %v", game.Name, user.ID, user.Username, err,
				)
			}

			return nil

		}

		//InitButtons(game.ID)

// 		msgTextStartGame := `–ü–†–ò–í–Ü–¢, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –§—ñ–±—ñ üòä, —ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∏ —Ç–∏–∂–Ω—ñ —è –±—É–¥—É –≤–∞—à–∏–º –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–º —É –≥—Ä—ñ ‚ú® –ì—Ä—ñ, –∑ —è–∫–æ—ó –≤–∏–π–¥—É—Ç—å –ø–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—è–º–∏ –≤—Å—ñ, —è–∫—â–æ –ø–æ–¥—ñ–ª—è—Ç—å—Å—è –æ–¥–Ω–∞ –∑ –æ–¥–Ω–æ—é —Å–≤–æ—ó–º –æ—Å–æ–±–ª–∏–≤–∏–º —Å–∫–∞—Ä–±–æ–º ‚Äì —É–≤–∞–≥–æ—é. –í—ñ–¥ –≤–∞—Å –≤–∏–º–∞–≥–∞—î—Ç—å—Å—è —Ç—Ä–æ—à–∫–∏ —á–∞—Å—É —ñ –≥–æ—Ç–æ–≤–µ –¥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å —Å–µ—Ä–¥–µ–Ω—å–∫–æ, –≤—ñ–¥ –º–µ–Ω–µ ‚Äì —Ü—ñ–∫–∞–≤–∞ –ø—Ä–∏–≥–æ–¥–∞, —è–∫—É —è –∑–∞–≥–æ—Ä–Ω—É–ª–∞ —É —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å–ø—ñ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.

// –ö–æ–∂–Ω–∞ –¥—Ä—É–∂–±–∞ - –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω–∞, —è–∫ –±—É–ª–æ—á–∫–∞, –ø–æ–≤–Ω–∞ —Ä–æ–¥–∑–∏–Ω–æ–∫ üçá –ú–∏ –±—É–¥–µ–º–æ –≤—ñ–¥—â–∏–ø—É–≤–∞—Ç–∏ —à–º–∞—Ç–æ—á–æ–∫ –∑–∞ —à–º–∞—Ç–æ—á–∫–æ–º, –≤–∏–∫–æ–Ω—É—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞ –∫–æ–∂–Ω–µ —É –≤–∞—Å –±—É–¥–µ 48 –≥–æ–¥–∏–Ω —ñ –Ω–µ–∑–ª—ñ—á–µ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤–∞—à–∏—Ö –±–µ—Å—Ç—ñ. –Ø–∫—â–æ —è–∫–∞—Å—å —Ä–æ–¥–∑–∏–Ω–∫–∞ –≤–∞–º –Ω–µ –¥–æ —Å–º–∞–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ê–ª–µ —Ç–∞–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫—ñ–≤ –∑–∞ –≤—Å—é –≥—Ä—É –∫–æ–∂–Ω—ñ–π —É—á–∞—Å–Ω–∏—Ü—ñ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è –ª–∏—à–µ 3.

// –¢–∞–∫–æ–∂ —î –∞–≤–∞—Ä—ñ–π–Ω–∞ –∫–Ω–æ–ø–∫–∞, —â–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ —Ü—é –≥—Ä—É —Ä–∞–Ω—ñ—à–µ (–∞–ª–µ —è –≤–∞–º —Ç–æ—á–Ω–æ –Ω–µ —Å–∫–∞–∂—É, –¥–µ –≤–æ–Ω–∞, –±–æ –¥—É–∂–µ —Ö–æ—á—É, —â–æ–± –≤–∏ —Ç–∞–Ω—Ü—é–≤–∞–ª–∏ –Ω–∞ —Ü—ñ–π –≤–µ—á—ñ—Ä—Ü—ñ –¥–æ —Ä–∞–Ω–∫—É). –ê —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–∏—Å–∞—Ç–∏—Å—è –¥–æ –¥—ñ-–¥–∂–µ—è, —è–∫–∏–π —Å—Ç–∞–≤–∏—Ç—å –º—É–∑–∏–∫—É –Ω–∞ —Ç–æ–º—É –±–æ—Ü—ñ (—Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞).

// –í–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–µ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —ñ —á–µ—Å–Ω—ñ—Å—Ç—å –º–∏ –ø–æ–º–Ω–æ–∂–∏–º–æ –Ω–∞ —Å–ø–æ–≥–∞–¥–∏ —ñ –≥—É–º–æ—Ä. –ê –ø–æ–∫–∏ —â–æ —Ç—Ä–∏–º–∞–π—Ç–µ –≤ –≥–æ–ª–æ–≤—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ ‚Äì —Ö–µ–≤ —Ñ–∞–Ω - —ñ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è —á–∞—Å–æ–º, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–º —Ä–∞–∑–æ–º!`

		
		// menuIntro := &telebot.ReplyMarkup{}
		// menuExit := &telebot.ReplyMarkup{}

		// introBtnHelp := menuIntro.Data("üïπÔ∏è –•–µ–ª–ø", "help_menu")
		// introBtnSupport := menuIntro.URL("üïπÔ∏è –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "https://t.me/Jay_jayss")
		// introBtnExit := menuIntro.Data("üïπÔ∏è –í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_%d", game.ID))

		// btnExactlyExit := menuIntro.Data("–í–∏–π—Ç–∏ –∑ –≥—Ä–∏", fmt.Sprintf("exit_game_%d", game.ID))
		// btnReturnToGame := menuIntro.Data(" << –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥—Ä–∏", "return_to_game")

		time.Sleep(600 * time.Millisecond) // Wait for 2 seconds before sending the next message
		//removeKeyboard := &telebot.ReplyMarkup{RemoveKeyboard: true}
		// menuIntro.Inline(
		// 	menuIntro.Row(introBtnHelp),
		// )

		SendStartGameMessages(bot)(c)
		 
		// _, err = bot.Send(chat, msgTextStartGame)
		// if err != nil {
		// 	utils.Logger.Errorf("Error sending welcome start game message go the chat %s: %v", chat.Title, err)
			
		// }

		storage_db.UpdateGameStatus(int64(game.ID), models.StatusGamePlaying)

		// Delay pause before sending tasks
		time.Sleep(cfg.Durations.TimePauseBeforeStartSendingTask)

		// Start sending tasks
		return SendTasks(bot, chat.ID)(c)
		//return utils.SafeHandlerWithMessage(FinishGameHandler(bot))(c)

	}
}

func handleHelpMenu(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()
	utils.Logger.WithFields(logrus.Fields{
		"source": "handleHelpMenu",
		"user_id": user.ID,
		"username": user.Username,
		"group": chat.Title,
	}).Info("Help menu button was pressed")

	menuIntro.Inline(
		menuIntro.Row(introBtnSupport),
		menuIntro.Row(introBtnExit),
	)
	// bot.EditReplyMarkup(c.Callback().Message, menuIntro)

	// time.Sleep(5 * time.Second) // Delay to allow user to read the message

	// 	menuIntro.Inline(
	// 		menuIntro.Row(introBtnHelp),
	// 	)

	// 	_, err := bot.EditReplyMarkup(msgStartGame, menuIntro)
	// 	if err != nil {
	// 		utils.Logger.WithFields(logrus.Fields{
	// 			"source": "StartGameHhandleHelpMenuandlerFoo",
	// 			"group": chat.Title,
	// 			"group_id": chat.ID,
	// 			"user_id": user.ID,
	// 			"username": user.Username,
	// 		}).Errorf("Failed to edit reply markup after exit game: %v", err)
	// 	}

	return nil
}

func handleExitConfirm(bot *telebot.Bot, c telebot.Context) error {
	utils.Logger.WithFields(logrus.Fields{
		"source": "handleExitConfirm",
		"user_id": c.Sender().ID,
		"username": c.Sender().Username,
		"group": c.Chat().Title,
	}).Info("Exit confirm button was pressed")

	user := c.Sender()
	chat := c.Chat()
	data := c.Callback().Data

	if strings.HasPrefix(data, "\fexit_") {
		gameIDStr := strings.TrimPrefix(data, "\fexit_")
		gameID, err := strconv.Atoi(gameIDStr)
		if err != nil {
			return nil
		}

		isUserInGame , err := storage_db.IsUserInGame(user.ID, gameID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user %s is in game: %v", user.Username, err)
			return nil
		}

		if !isUserInGame {
			msgTextUserIsNotInGame := fmt.Sprintf("–¢–∏ –Ω–µ –≤ –≥—Ä—ñ, @%s. –¢–æ–º—É –Ω–µ –º–æ–∂–µ—à –≤–∏–π—Ç–∏ –∑ –Ω–µ—ó ü§∑‚Äç‚ôÇÔ∏è", user.Username)

			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				msgmanager.TypeNotInGame, // unique message type
				msgTextUserIsNotInGame,
				cfg.Durations.TimeDeleteMsgYouAreNotInGame,
			)
			if err != nil {
				utils.Logger.Errorf("Error sending message that user %s is not in game: %v", user.Username, err)
			}


			return nil
		}

		roleUserInGame, err := storage_db.GetPlayerRoleByUserIDAndGameID(user.ID, gameID)
		if err != nil {
			utils.Logger.Errorf("Error getting player role for user %s in game %d: %v", user.Username, gameID, err)
			return nil
		}

		if roleUserInGame == "admin" {
			msgTextAdminExit := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgAdminExitGame), user.Username)
			
			// Using MessageManager to Send with Anti-Duplicate Protection
			_, err := msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				"admin_exit", // unique message type
				msgTextAdminExit,
				cfg.Durations.TimeDeleteMsgAdminExit,
			)

		
			if err != nil {
				utils.Logger.Errorf("Error sending message that admin %s cannot exit game: %v", user.Username, err)
			}

			return nil
		}

		msgTextExtit := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgPlayerExitGame), user.Username)

						
		menuExit.Inline(
			menuExit.Row(btnExactlyExit),
			menuExit.Row(btnReturnToGame),
		)

		_, err = msgmanager.SendTemporaryMessage(
			chat.ID,
			user.ID,
			msgmanager.TypeExitSuccess, // unique message type
			msgTextExtit,
			cfg.Durations.TimeDeleteMsgAdminExit,
			menuExit,
		)
		if err != nil {
			utils.Logger.Errorf("Error sending exit game message to the chat %s: %v", chat.Title, err)
		}
	}
			
	return nil
}

func handleExitGame(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()
	data := c.Callback().Data

	if strings.HasPrefix(data, "\fexit_game_") {
		gameIDStr := strings.TrimPrefix(data, "\fexit_game_")
		gameID, err := strconv.Atoi(gameIDStr)
		if err != nil {
			return nil
		}

		isUserInGame , err := storage_db.IsUserInGame(user.ID, gameID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "handleExitGame",
				"group": chat.Title,
				"group_id": chat.ID,
				"user_id": user.ID,
				"username": user.Username,
			}).Errorf("Error checking if user %s is in game: %v", user.Username, err)
		}
		
		if !isUserInGame {
			msgTextUserIsNotInGame := fmt.Sprintf("@%s —Ç–∏ –∂ –≤–∂–µ –≤–∏–π—à–ª–∞ –∑ –≥—Ä–∏ ü§∑‚Äç‚ôÇÔ∏è", chat.Username)
			msgUserIsNotInGame, err := bot.Send(chat, msgTextUserIsNotInGame)
			if err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "handleExitGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Errorf("Error sending message that user %s is not in game: %v", chat.Username, err)
			}

			time.AfterFunc(cfg.Durations.TimeDeleteMsgYouAreNotInGame, func() {
				err := bot.Delete(msgUserIsNotInGame)
				if err != nil {
					utils.Logger.WithFields(logrus.Fields{
						"source": "handleExitGame",
						"group": chat.Title,
						"group_id": chat.ID,
						"user_id": user.ID,
						"username": user.Username,
					}).Errorf("Failed to delete message that user is not in game: %v", err)
				}
			})
		}

		storage_db.DeletePlayerFromGame(user.ID, gameID)

		err = bot.Delete(c.Callback().Message)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
					"source": "handleExitGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,		
				}).Errorf("Failed to delete message with exit confirmation: %v", err)
			return nil
		}

		msgTextExit := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgExactlyExitGame), user.Username)
		_, err = bot.Send(chat, msgTextExit)
		if err != nil {
			utils.Logger.Errorf("Error sending exit message to the chat %s: %v", chat.Title, err)
		}

	}
			
	return nil
}

func handleReturnToGame(bot *telebot.Bot, c telebot.Context) error {
	user := c.Sender()
	chat := c.Chat()

	err := bot.Delete(c.Callback().Message)
	if err != nil {
		utils.Logger.WithFields(logrus.Fields{
			"source": "handleReturnToGame",
			"group": chat.Title,
			"group_id": chat.ID,
			"user_id": user.ID,
			"username": user.Username,
		}).Errorf("Failed to delete return to game message: %v", err)
		return nil
	}

	msgTextReturnToGame := fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgReturnToGame), user.Username)
	msgReturnToGame, err := bot.Send(chat, msgTextReturnToGame)
	if err != nil {
		utils.Logger.Errorf("Error sending return to game message to the chat %s: %v", chat.Title, err)
	}

	time.AfterFunc(cfg.Durations.TimeDeleteMsgReturnToGame, func() {
		err := bot.Delete(msgReturnToGame)
		if err != nil {
			if strings.Contains(err.Error(), "message to delete not found") {
				utils.Logger.WithFields(logrus.Fields{
					"source": "handleReturnToGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Info("Message was already deleted earlier, skip deleting")
			} else {
				utils.Logger.WithFields(logrus.Fields{		
					"source": "handleReturnToGame",
					"group": chat.Title,
					"group_id": chat.ID,
					"user_id": user.ID,
					"username": user.Username,
				}).Errorf("Failed to delete return to game message: %v", err)
			}
		}
	})
	// menuIntro.Inline(
	// 	menuIntro.Row(introBtnHelp),
	// )

	// _, err = bot.EditReplyMarkup(msgStartGame, menuIntro)
	// if err != nil {
	// 	utils.Logger.WithFields(logrus.Fields{
	// 		"source": "handleReturnToGame",
	// 		"group": chat.Title,
	// 		"group_id": chat.ID,
	// 		"user_id": user.ID,
	// 		"username": user.Username,
	// 	}).Errorf("Failed to edit reply markup after return to game: %v", err)
	// 	return nil
	// }
			
	return nil
}

func HandlerPlayerResponse(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		chat := c.Chat()
		msg := c.Message()

		// –üCheck: if the message is part of an album and has already been processed, ignore it
		if msg.AlbumID != "" {
			if _, exists := processedAlbums[msg.AlbumID]; exists {
				return nil
			}

			// Register the album and set it to clear after 2 minutes
			processedAlbums[msg.AlbumID] = time.Now()

			// Delay delete album ID for group media msg
			time.AfterFunc(cfg.Durations.TimeDeleteAlbumId, func() {
				delete(processedAlbums, msg.AlbumID)
			})
		}

		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "HandleUHandlerPlayerResponseserJoined",
				"chat_id": chat.ID,
				"user_called": user.Username,
			}).Errorf("Error getting game by chat ID: %v", err)
			
			return nil
		}

		statusUser, err := storage_db.GetStatusPlayer(user.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "HandlerPlayerResponse",
				"user_id": user.ID,
				"username": user.Username,
				"group": chat.Title,
			}).Errorf("Error getting status player: %v", err)
		
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
				"source": "HandlerPlayerResponse",
				"username": user.Username,
				"group": chat.Title,
				"status_uer_from_DB": statusUser,
				"status_user_in_blocK_if": models.StatusPlayerWaiting+strconv.Itoa(game.CurrentTaskID),
			}).Info("Info about player and his status")

		if statusUser == models.StatusPlayerNoWaiting {
			utils.Logger.WithFields(logrus.Fields{
				"source": "HandlerPlayerResponse",
				"user_id": user.ID,
				"username": user.Username,		
				"group": chat.Title,
			}).Warnf("User %s is not waiting for task %d, current status: %s", user.Username, game.CurrentTaskID, statusUser)
			
			// Skip message of user he already answered
			return nil
		}
		
		userTaskID, _ := utils.GetWaitingTaskID(statusUser)

		// Skip messges from user. User answered subtask
		if userTaskID == 3 {
			return nil
		}

		playerResponse := &models.PlayerResponse{
				PlayerID:   user.ID,
				GameID: 	game.ID,
				TaskID:		userTaskID,
				HasResponse: true,
				Skipped: false,
			}

			storage_db.AddPlayerResponse(playerResponse)

			bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUserAnswerAccepted), user.Username, userTaskID))

			storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerNoWaiting)

		return nil
	}
}

// SendFirstTasks send all tasks in group chat
func SendTasks(bot *telebot.Bot, chatID int64) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		game, err := storage_db.GetGameByChatId(chatID)
	if err != nil {
		utils.Logger.WithFields(logrus.Fields{
			"siource": "SendTasks",
			"chat_id": chatID,
			"chat_name": game.Name,
		}).Errorf("Error getting game by chat ID: %v", err)
	
		return err
	}

    tasks, err := utils.LoadTasks("internal/data/tasks/tasks.json")
    if err != nil {
		    utils.Logger.Errorf("SendTasks logs: Error loading tasks: %v", err)
        return err
    }

    if len(tasks) == 0 {
		utils.Logger.Error("SendTasks logs: No tasks to send. Tasks's array is empty" )
		return nil
	}

    for i, task := range tasks {
        //task := tasks[i]
		storage_db.UpdateCurrentTaskID(game.ID, task.ID)
        // msg := "üåü *" + task.Tittle + "*\n" + task.Description

		msg := task.Tittle + "\n\n" + task.Description
		
		// create buttons Answer and Skip
		inlineKeys := &telebot.ReplyMarkup{} // initialize inline keyboard

		//answerBtn := inlineKeys.Data("–•–æ—á—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", "answer_task", fmt.Sprintf("waiting_%d", task.ID))
		//skipBtn := inlineKeys.Data("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "skip_task", fmt.Sprintf("skip_%d", task.ID))
		answerBtn := btnmanager.Get(inlineKeys, models.UniqueAnswerTask, task.ID)
		skipBtn := btnmanager.Get(inlineKeys, models.UniqueSkipTask, task.ID)

		inlineKeys.Inline(
			inlineKeys.Row(answerBtn, skipBtn),
		)

        _, err := bot.Send(
            &telebot.Chat{ID: chatID},
            msg,
			inlineKeys,
            telebot.ModeMarkdown,
        )
        if err != nil {
            return err
        }

		if i < len(tasks)-1 {
			if i == 2 {
				time.Sleep(5 * time.Minute) // Wait for 5 seconds before sending the next task
			}
			// Delay pause between sending tasks
			time.Sleep(cfg.Durations.TimePauseBetweenSendingTasks) // await some minutes or hours before sending the next task
		}

    }

	return FinishGameHandler(bot)(c)

	}
	
}

// func GetReferalLinkHandler(bot *telebot.Bot) func(c telebot.Context) error {
// 	return func(c telebot.Context) error {
// 		chat := c.Chat()
// 		game , err := storage_db.GetGameByChatId(chat.ID)
// 		if err != nil {
// 			utils.Logger.WithFields(logrus.Fields{
// 				"source": "GetReferalLinkHandler",
// 				"group": chat.Title,
// 				"group_id": chat.ID,	
// 				"user_id": c.Sender().ID,
// 				"username": c.Sender().Username,
// 			}).Errorf("Error getting game by chat ID: %v", err)
// 			return nil
// 		}

// 		userAdminGame, err := storage_db.GetAdminPlayerByGameID(game.ID)
// 		if err != nil {
// 			utils.Logger.WithFields(logrus.Fields{
// 				"source": "GetReferalLinkHandler",
// 				"group": chat.Title,
// 				"group_id": chat.ID,
// 				"user_id": c.Sender().ID,
// 				"username": c.Sender().Username,
// 			}).Errorf("Error getting admin player by game ID: %v", err)
// 		}

// 		refLink1 := utils.GenerateInviteLink(int(userAdminGame.ID))

// 		bot.Send(&telebot.Chat{ID: chat.ID}, 
// 		fmt.Sprintf("–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: <a href=\"%s\">%s</a>", refLink1, refLink1),
// 		&telebot.SendOptions{
// 			ParseMode: telebot.ModeHTML,
// 			DisableWebPagePreview: true,
// 		},
// )

// 		return nil
// 	}
// }

func SendReferalMsg(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		userCalled := c.Sender()

		var refLink string

		// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
			utils.Logger.WithFields(logrus.Fields{
				"source":   "SendReferalMsg",
				"group":    chat.Title,
				"group_id": chat.ID,
				"user_id":  userCalled.ID,
				"username": userCalled.Username,
			}).Warnf("Game not found or error occurred: %v", err)

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			refLink = utils.GenerateInviteLink(int(userCalled.ID))
		} else {
			// –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∞
			adminPlayer, err := storage_db.GetAdminPlayerByGameID(game.ID)
			if err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source":   "SendReferalMsg",
					"group":    chat.Title,
					"group_id": chat.ID,
					"user_id":  userCalled.ID,
					"username": userCalled.Username,
				}).Warnf("Admin not found, fallback to sender: %v", err)

				refLink = utils.GenerateInviteLink(int(userCalled.ID))
			} else {
				refLink = utils.GenerateInviteLink(int(adminPlayer.ID))
			}
		}

		// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è
		msg := referalMsg
		msg = strings.ReplaceAll(msg, "Instagram", fmt.Sprintf(`<a href="%s">Instagram</a>`, utils.GetStaticMessage(socialMediaLinks, models.LinkInstagram)))
		msg = strings.ReplaceAll(msg, "TikTok", fmt.Sprintf(`<a href="%s">TikTok</a>`, utils.GetStaticMessage(socialMediaLinks, models.LinkTikTok)))
		msg = strings.ReplaceAll(
			msg,
			"–û—Å—å —Ç–≤–æ—î –ö–æ—Å–º—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∑–∞ —è–∫–∏–º –ø–æ–¥—Ä—É–∂–∫–∏ —ñ –ø–æ–¥—Ä—É–∂–∫–∏ –ø–æ–¥—Ä—É–∂–æ–∫ –∑–º–æ–∂—É—Ç—å –∑—ñ–≥—Ä–∞—Ç–∏ —É –≤–ª–∞—Å–Ω—É –≥—Ä—É BESTIEVERSE",
			fmt.Sprintf(`<a href="%s">–û—Å—å —Ç–≤–æ—î –ö–æ—Å–º—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∑–∞ —è–∫–∏–º –ø–æ–¥—Ä—É–∂–∫–∏ —ñ –ø–æ–¥—Ä—É–∂–∫–∏ –ø–æ–¥—Ä—É–∂–æ–∫ –∑–º–æ–∂—É—Ç—å –∑—ñ–≥—Ä–∞—Ç–∏ —É –≤–ª–∞—Å–Ω—É –≥—Ä—É BESTIEVERSE</a>`, refLink),
		)

		// –û—Ç–ø—Ä–∞–≤–∫–∞
		_, err = bot.Send(chat, msg, &telebot.SendOptions{
			ParseMode:             telebot.ModeHTML,
			DisableWebPagePreview: true,
		})
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source":   "SendReferalMsg",
				"group":    chat.Title,
				"group_id": chat.ID,
				"err":      err,
			}).Error("Error sending referral message to the group")
			return err
		}

		utils.Logger.WithFields(logrus.Fields{
			"group": chat.Title,
			"user":  userCalled.Username,
			"link":  refLink,
		}).Info("Referral message sent successfully")

		return nil
	}
}

// SendFeedbackMsg sends a feedback message to the users
func SendFeedbackMsg(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()

		feedbackMenu := &telebot.ReplyMarkup{}

		feedbackBtn := btnmanager.Get(feedbackMenu, models.UniqueFeedback)

		feedbackMenu.Inline(
			feedbackMenu.Row(feedbackBtn),
		)

		// startMenu.Inline(
		// 	startMenu.Row(startBtnSupport),
		// )
		_, err := bot.Send(chat, feedbackMsg, feedbackMenu)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "SendFeedbackMsg",
				"group": chat.Title,
				"err": err,
			}).Error("Error sending feedback message to the group")
			return err
		}

		utils.Logger.Info("Feedback message sent successfully")

		return nil
	}
}

func SendBuyMeCoffeeMsg(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()

		_, err := bot.Send(chat, buyMeCoffeeMsg, telebot.ModeMarkdown)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "SendBuyMeCoffeeMsg",
				"group": chat.Title,
				"err": err,
			}).Error("Error sending Buy Me Coffee message to the group")
			return err
		}

		utils.Logger.Info("Buy Me Coffee message sent successfully")

		return nil
	}
}

func FinishGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "FinishGameHandler",
				"group": chat.Title,
				"err": err,
			}).Error("Finish game handler called")
			
			return nil
		}
		
		utils.Logger.WithFields(logrus.Fields{
			"source": "FinishGameHandler",
			"group": chat.Title,
		}).Info("Finish game handler called")

		// Final game. Future - function of final game will be here run
// 		finishMsg := `‚ú® –û º–∫–µ–π, –±–æ–≥–∏–Ω—ñ –¥—Ä—É–∂–±–∏, —Ü–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ ‚Äî –í–ò –ü–†–û–ô–®–õ–ò –¶–ï–ô –®–õ–Ø–• –†–ê–ó–û–ú! ‚ú®

// –Ø —Ö–æ—á—É, —â–æ–± –≤–∏ –∑–∞—Ä–∞–∑ –Ω–∞ —Å–µ–∫—É–Ω–¥—É –≤—ñ–¥—ñ—Ä–≤–∞–ª–∏—Å—è –≤—ñ–¥ –µ–∫—Ä–∞–Ω—É, –∑—Ä–æ–±–∏–ª–∏ –≥–ª–∏–±–æ–∫–∏–π –≤–¥–∏—Ö —ñ —É—Å–≤—ñ–¥–æ–º–∏–ª–∏: –í–ò –ù–ï–ô–û–í–Ü–†–ù–Ü! –ù–µ —Ç–æ–º—É, —â–æ –≤–∏–∫–æ–Ω–∞–ª–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ö–æ—á–∞ —Ü–µ —Ç–µ–∂ –∫—Ä—É—Ç–æ!), –∞ —Ç–æ–º—É, —â–æ –≤–∏ —Å—Ç–≤–æ—Ä—é—î—Ç–µ –ø—Ä–æ—Å—Ç—ñ—Ä, –¥–µ –º–æ–∂–Ω–∞ –±—É—Ç–∏ —Å–æ–±–æ—é. –î–µ –º–æ–∂–Ω–∞ –Ω–∏—Ç–∏, –º—Ä—ñ—è—Ç–∏, —Ä–µ–≥–æ—Ç–∞—Ç–∏, –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏, –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏—Å—è —ñ –±—É—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é. –í–∏ –¥–∞—î—Ç–µ –æ–¥–Ω–∞ –æ–¥–Ω—ñ–π —Å–≤–æ—é —É–≤–∞–≥—É, —á–∞—Å —ñ –º–µ–Ω—Ç–∞–ª—å–Ω—ñ –æ–±–Ω—ñ–º–∞—à–∫–∏.¬†
	
// –Ü —Ü–µ —Ç–æ—á–Ω–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–æ–º–µ–Ω—Ç, —â–æ–± –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ –≤—Å–µ—Å–≤—ñ—Ç—É –∑–∞ –í–ê–°! –°–µ—Ä–π–æ–∑–Ω–æ, –≤ —Å–≤—ñ—Ç—ñ 8 –º—ñ–ª—å—è—Ä–¥—ñ–≤ –ª—é–¥–µ–π, –∞ –≤–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏ —Å–≤–æ—ó—Ö —Å–µ—Å—Ç–µ—Ä –ø–æ –¥—É—Ö—É —ñ –∑–º–æ–≥–ª–∏ –ø—Ä–æ–Ω–µ—Å—Ç–∏ —Ü—é –¥—Ä—É–∂–±—É –∫—Ä—ñ–∑—å —Ä–æ–∫–∏ –ø–æ–ø—Ä–∏ –≤—Å–µ! –¶–µ –º–∞–≥—ñ—è, —Ü–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —ñ —Ü–µ –≤–¥—è—á–Ω—ñ—Å—Ç—å. –ë–µ—Ä–µ–∂—ñ—Ç—å —Ü—é –±—É–ª–æ—á–∫—É –∑ —Ä–æ–¥–∑–∏–Ω–∫–∞–º–∏ ‚Äî –≤–æ–Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∞.üíõ
	
// –Ø —Å–ø–æ–¥—ñ–≤–∞—é—Å—è, —â–æ —Ü–µ–π –¥–æ—Å–≤—ñ–¥ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É –≤–∏–≥–ª—è–¥—ñ —á–∞—Ç–∏–∫—É, –∞ —è–∫ —Ç–µ–ø–ª–µ —Ç—Ä—ñ–ø–æ—Ç—ñ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ: —É –º–µ–Ω–µ —î –º–æ—ó –ª—é–¥–∏. –Ü —Ü–µ ‚Äî –±–µ–∑—Ü—ñ–Ω–Ω–æ.
// –Ü, –∑–≤—ñ—Å–Ω–æ, —Ü–µ–π –∫–≤–µ—Å—Ç –Ω–µ –º–∞—î –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è! –¢–æ–º—É —â–æ –¥—Ä—É–∂–±–∞ ‚Äî —Ü–µ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∞ —ñ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –ø—Ä–∏–≥–æ–¥–∞.
	
// –¢–µ–ø–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è: –∫–æ–ª–∏ —ñ –¥–µ –≤–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç–µ—Å—è, —â–æ–± –≤—ñ–¥—Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –ø–µ—Ä–µ–º–æ–≥—É, –∑—ñ—Ä–æ–Ω—å–∫–∏? ü•Ç üòâ`
		
		_, err = bot.Send(&telebot.Chat{ID: chat.ID}, finishMessage, telebot.ModeMarkdown)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "FinishGameHandler",
				"group": chat.Title,
				"err": err,
			}).Error("Error sending final message to the group")
		}

		// _, err := bot.Send(
        //     &telebot.Chat{ID: chatID},
        //     msg,
		// 	inlineKeys,
        //     telebot.ModeMarkdown,
        // )

		storage_db.UpdateGameStatus(int64(game.ID), models.StatusGameFinished)

		time.Sleep(5 * time.Second)

		SendReferalMsg(bot)(c)

		time.Sleep(5 * time.Second)

		SendFeedbackMsg(bot)(c)

		time.Sleep(5 * time.Second)

		SendBuyMeCoffeeMsg(bot)(c)

		return nil
	}
}

func FinishTestHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		chat := c.Chat()
		_, err := bot.Send(&telebot.Chat{ID: chat.ID}, finishMessage, telebot.ModeMarkdown)
		if err != nil {
			utils.Logger.WithFields(logrus.Fields{
				"source": "FinishGameHandler",
				"group": chat.Title,
				"err": err,
			}).Error("Error sending final message to the group")
		}
		return nil
	}
}

// Handler for answering a task
func OnAnswerTaskBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		chat := c.Chat()
		dataButton := c.Data()
		game, err := storage_db.GetGameByChatId(chat.ID)
		if err != nil {
			utils.Logger.Errorf("Error getting game by chat ID (%d): %v", chat.ID, err)
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
			"source": "OnAnswerTaskBtnHandler",
			"username": user.Username,
			"group": chat.Title,
			"data_button": dataButton,
		}).Infof("User click to button WantAnswer to task %v", dataButton)

		userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user is in game: %v", err)
			return nil
		}
		if !userIsInGame {
			SendJoinGameReminder(bot)(c)

			return nil
		}

		idTask, err := utils.GetWaitingTaskID(dataButton)
		if err != nil {
			utils.Logger.Errorf("Error getting task ID from data button: %v", err)
		}

		// switch idTask {
		// case 3:
		// 	subtasks.WhoIsUsSubTask(bot)(c)
		// 	return nil
		// case 7:
		// 	// call function for subtask for task 7
		// case 12:
		// 	// call function for subtask for task 12
		// }

		status, err := storage_db.CheckPlayerResponseStatus(user.ID, game.ID, idTask)
		if err != nil {
			utils.Logger.Errorf("Error checking player response status: %v", err)
			return nil
		}

		switch {
		case status.AlreadyAnswered:
			//textYouAlreadyAnswered := fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòÖ", user.Username)
			msgYouAlreadyAnswered, err := bot.Send(chat, fmt.Sprintf(utils.GetRandomMsg(alreadyAnswerMessages), user.Username))
			if err != nil {
				utils.Logger.Errorf("Error sending message that user %s already answered task %d: %v", user.Username, idTask, err)
			}

			time.AfterFunc(cfg.Durations.TimeDeleteMsgYouAlreadyAnswered, func() {
				err = bot.Delete(msgYouAlreadyAnswered)
				if err != nil {
					utils.Logger.WithFields(logrus.Fields{
						"source": "OnAnswerTaskBtnHandler",
						"username": user.Username,
						"group": chat.Title,
						"data_button": dataButton,
						"task_id": idTask,
					}).Errorf("Error deleting message that user %s already answered task %d: %v", user.Username, idTask, err)
				}
			})

			// return c.Send(fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòâ", user.Username))
			return nil
		case status.AlreadySkipped:
			return c.Send(fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUserAlreadySkipTask), user.Username))
		}

		storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerWaiting+strconv.Itoa(idTask))

		switch idTask {
		case 3:
			subtasks.WhoIsUsSubTask(bot)(c)
			return nil
		case 7:
			// call function for subtask for task 7
		case 12:
			// call function for subtask for task 12
		}

		awaitingAnswerMsg, err := bot.Send(chat, fmt.Sprintf(utils.GetRandomMsg(wantAnswerMessages), user.Username))
		if err != nil {
			utils.Logger.Errorf("Error sending message: %v", err)
		}

		// Delay delete msg awaiting answer
		time.AfterFunc(cfg.Durations.TimeDeleteMsgAwaitingAnswer, func() {
			err = bot.Delete(awaitingAnswerMsg)
			if err != nil {
				utils.Logger.WithFields(logrus.Fields{
					"source": "OnAnswerTaskBtnHandler",
					"username": user.Username,
					"group": chat.Title,
					"data_button": dataButton,
					"task_id": idTask,
				}).Errorf("Error deleting answer task message for user %s in the group %s: %v", chat.Username, chat.Title, err)
			}
		})

		return nil
	}
}

// Handler for skipping a task
func OnSkipTaskBtnHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		utils.Logger.Info("OnSkipTaskHandler called")

		user := c.Sender()
		chat := c.Chat()
		dataButton := c.Data()
		game, _ := storage_db.GetGameByChatId(chat.ID)
		//statusUser, err := storage_db.GetStatusPlayer(user.ID)
		userTaskID, err := utils.GetSkipTaskID(dataButton)
		if err != nil {
			utils.Logger.Errorf("Error getting skip task ID from data button: %v", err)
			return nil
		}

		utils.Logger.WithFields(logrus.Fields{
			"source": "OnSkipTaskBtnHandler",
			"user": user.Username,
			"group": chat.Title,
			"data_button": dataButton,
			"skip_task_id": userTaskID,
		}).Infof("User click to button SkipTask from tasl %v", dataButton)

		userIsInGame, err := storage_db.IsUserInGame(user.ID, game.ID)
		if err != nil {
			utils.Logger.Errorf("Error checking if user is in game: %v", err)
			return nil
		}
		if !userIsInGame {
			SendJoinGameReminder(bot)(c)

			return nil
		}

		status, err := storage_db.SkipPlayerResponse(user.ID, game.ID, userTaskID)
		if err != nil {
			utils.Logger.Errorf("Error skipping task %d bu user: %v. %v", userTaskID, user.Username, err)
			return nil
		}

		switch {
		case status.AlreadyAnswered:
			bot.Send(chat, fmt.Sprintf(utils.GetRandomMsg(alreadyAnswerMessages), user.Username))
		case status.AlreadySkipped:
			bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUserAlreadySkipTask), user.Username))
		case status.SkipLimitReached:
			msg, _ := bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(skipMessages, models.MsgSkipLimitReached), user.Username))
			
			// Delay delete the message max skip tasks
			time.AfterFunc(cfg.Durations.TimeDeleteMsgMaxSkipTasks, func() {
				err = bot.Delete(msg)
				if err != nil {
					utils.Logger.Errorf("Error deleting skip limit reached message for user %s: %v", user.Username, err)
				}
			})
		default:
			switch status.RemainingSkips-1 {
			case 0:
				bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(skipMessages, models.MsgSkipThirdTime), user.Username))
			case 1:
				bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(skipMessages, models.MsgSkipSecondTime), user.Username))
			case 2:
				bot.Send(chat, fmt.Sprintf(utils.GetStaticMessage(skipMessages, models.MsgSkipFirstTime), user.Username))
			}
			// Skip messages
			//bot.Send(chat, fmt.Sprintf("‚úÖ @%s, –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ! –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å %d –ø—Ä–æ–ø—É—Å–∫(—ñ–≤).", user.Username, status.RemainingSkips-1))
		}

		return nil
	}
}

// func HandleSubTask3(bot *telebot.Bot) func(c telebot.Context) error {
//     return func(c telebot.Context) error {
//         utils.Logger.Infof("HandleSubTask3 called by user %s in group %s", c.Sender().Username, c.Chat().Title)
        
//         user := c.Sender()
// 		chat := c.Chat()
//         msg := c.Message()
//         data := c.Data()

// 		game, _ := storage_db.GetGameByChatId(chat.ID)
        
//         // Check if this is a subtask callback
//         if !strings.HasPrefix(data, "subtask_") {
//             return nil
//         }
        
//         // Remove prefix "subtask_" first
//         dataWithoutPrefix := strings.TrimPrefix(data, "subtask_")
//         // Now: "3_0_123456789|Jay_jayss"
        
//         // Find first underscore (taskID separator)
//         firstUnderscore := strings.Index(dataWithoutPrefix, "_")
//         if firstUnderscore == -1 {
//             utils.Logger.Errorf("Invalid callback data format: %s", data)
//             return c.Send("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
//         }
        
//         taskIdStr := dataWithoutPrefix[:firstUnderscore]
//         remainder := dataWithoutPrefix[firstUnderscore+1:]
       
// 		// Convert strings to appropriate types
//         taskID, err := strconv.Atoi(taskIdStr)
//         if err != nil {
//             utils.Logger.Errorf("Invalid task ID: %s", taskIdStr)
//             return c.Send("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–≤–¥–∞–Ω–Ω—è")
//         }
        
//         // Find second underscore (questionIndex separator)
//         secondUnderscore := strings.Index(remainder, "_")
//         if secondUnderscore == -1 {
//             utils.Logger.Errorf("Invalid callback data format: %s", data)
//             return c.Send("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
//         }
        
//         questionIndexStr := remainder[:secondUnderscore]
//         userPart := remainder[secondUnderscore+1:]
		
// 		questionIndex1, _ := strconv.ParseInt(questionIndexStr, 10, 64)
// 		questionIndex := uint(questionIndex1)
//         // Parse user part: {userID}|{userName}
//         pipeIndex := strings.Index(userPart, "|")
//         if pipeIndex == -1 {
//             utils.Logger.Errorf("Invalid user data format in callback: %s", userPart)
//             return c.Send("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
//         }
        
//         selectedUserIdStr := userPart[:pipeIndex]    
		
// 		selectedUserID, err := strconv.ParseInt(selectedUserIdStr, 10, 64)
//         if err != nil {
//             utils.Logger.Errorf("Invalid user ID: %s", selectedUserIdStr)
//             return c.Send("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
//         }// "123456789"
//         selectedUsername := userPart[pipeIndex+1:]   // "Jay_jayss"
        
//         utils.Logger.WithFields(logrus.Fields{
//             "source":            "HandleSubTask3",
//             "user_id":           user.ID,
//             "username":          user.Username,
//             "group":             c.Chat().Title,
//             "task_id":           taskID,
//             "question_index":    questionIndex,
//             "selected_user_id":  selectedUserID,
//             "selected_username": selectedUsername,
//         }).Infof("User %s selected user %s in group %s", user.Username, selectedUsername, c.Chat().Title)

// 		subTaskAnswer := &models.SubtaskAnswer{
// 			GameID: game.ID,
// 			TaskID: taskID,
// 			QuestionIndex: questionIndex,
// 			AnswererUserID: user.ID,
// 			SelectedUserID: selectedUserID,
// 			SelectedUsername: selectedUsername,
// 		}

// 		err = storage_db.AddSubtaskAnswer(subTaskAnswer)
// 		if err != nil {
// 			utils.Logger.Errorf("Error add subtask answer to DB: %v", err)
// 		} else {
// 			utils.Logger.Infof("Answe of subtask add to DB: succes")
// 		}
        
//         err = bot.Delete(msg)
//         if err != nil {
//             utils.Logger.WithFields(logrus.Fields{
//                 "source":   "HandleSubTask3",
//                 "user_id":  user.ID,
//                 "username": user.Username,
//                 "group":    c.Chat().Title,
//             }).Errorf("Failed to delete message with subtask 3: %v", err)
//             return nil
//         }
        
//         return nil
//     }
// }

func HandleSubTask3(bot *telebot.Bot) func(c telebot.Context) error {
    return func(c telebot.Context) error {
        user := c.Sender()
        chat := c.Chat()
        msg := c.Message()
        data := c.Data()
        
        // Check if this is a subtask callback
        if !strings.HasPrefix(data, "subtask_") {
            return nil
        }
        
        game, err := storage_db.GetGameByChatId(chat.ID)
        if err != nil {
            utils.Logger.Errorf("Failed to get game by chat ID %d: %v", chat.ID, err)
            return c.Send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏")
        }
        
        // Parse callback data
        // ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞) ...
        
        // Remove prefix "subtask_" first
        dataWithoutPrefix := strings.TrimPrefix(data, "subtask_")
        
        // Parse data (your existing parsing code)
        firstUnderscore := strings.Index(dataWithoutPrefix, "_")
        taskIDStr := dataWithoutPrefix[:firstUnderscore]
        remainder := dataWithoutPrefix[firstUnderscore+1:]
        
        secondUnderscore := strings.Index(remainder, "_")
        questionIndexStr := remainder[:secondUnderscore]
        userPart := remainder[secondUnderscore+1:]
        
        pipeIndex := strings.Index(userPart, "|")
        selectedUserIDStr := userPart[:pipeIndex]
        selectedUsername := userPart[pipeIndex+1:]
        
        // Convert to types
        taskID, _ := strconv.Atoi(taskIDStr)
        questionIndex, _ := strconv.ParseUint(questionIndexStr, 10, 32)
        selectedUserID, _ := strconv.ParseInt(selectedUserIDStr, 10, 64)
        
		status, err := storage_db.CheckPlayerResponseStatus(user.ID, game.ID, taskID)
		if err != nil {
			utils.Logger.Errorf("Error checking player response status: %v", err)
			return nil
		}

		switch {
		case status.AlreadyAnswered:
			//textYouAlreadyAnswered := fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòÖ", user.Username)
			msgYouAlreadyAnswered, err := bot.Send(chat, fmt.Sprintf(utils.GetRandomMsg(alreadyAnswerMessages), user.Username))
			if err != nil {
				utils.Logger.Errorf("Error sending message that user %s already answered task %d: %v", user.Username, taskID, err)
			}

			time.AfterFunc(cfg.Durations.TimeDeleteMsgYouAlreadyAnswered, func() {
				err = bot.Delete(msgYouAlreadyAnswered)
				if err != nil {
					utils.Logger.WithFields(logrus.Fields{
						"source": "OnAnswerTaskBtnHandler",
						"username": user.Username,
						"group": chat.Title,
						"data_button": data,
						"task_id": taskID,
					}).Errorf("Error deleting message that user %s already answered task %d: %v", user.Username, taskID, err)
				}
			})

			// return c.Send(fmt.Sprintf("@%s, —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∞ –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è üòâ", user.Username))
			return nil
			case status.AlreadySkipped:
			return c.Send(fmt.Sprintf(utils.GetStaticMessage(staticMessages, models.MsgUserAlreadySkipTask), user.Username))
		}

		//storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerWaiting+strconv.Itoa(taskID))

        // Check if user has active session
        session, exists := subtasks.GlobalSessionManager.GetActiveSession(game.ID)
        if !exists || session.UserID != user.ID {
			msgTextOtherUserAnswer := fmt.Sprintf("@%s –¥–æ–Ω—Ç –ø—É—à –∑–µ —Ö–æ—Ä—Å–µ—Å! –Ü–Ω—à–∞ –∑—ñ—Ä–æ—á–∫–∞ –∑–∞—Ä–∞–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.", user.Username)

			_, err = msgmanager.SendTemporaryMessage(
				chat.ID,
				user.ID,
				msgmanager.TypeNotInGame,
				msgTextOtherUserAnswer,
				10 * time.Second,
			)
			if err != nil {
					utils.Logger.Errorf("Error sending message that user %s is not in game: %v", user.Username, err)
			}

            return nil
        }
        
        utils.Logger.WithFields(logrus.Fields{
            "source":            "HandleSubTask3",
            "username":          user.Username,
            "task_id":           taskID,
            "question_index":    uint(questionIndex),
            "selected_user_id":  selectedUserID,
            "selected_username": selectedUsername,
        }).Infof("User %s selected user %s", user.Username, selectedUsername)
        
        // Delete the question message
        err = bot.Delete(msg)
        if err != nil {
            utils.Logger.Errorf("Failed to delete message: %v", err)
        }
        
        // Save answer and check if completed
        completed, err := subtasks.GlobalSessionManager.SaveAnswerAndNext(game.ID, selectedUsername)
        if err != nil {
            utils.Logger.Errorf("Error saving subtask answer: %v", err)
            return c.Send("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        }
        
        if completed {
            // All questions answered
            answers := subtasks.GlobalSessionManager.CompleteSession(game.ID)
            
            utils.Logger.WithFields(logrus.Fields{
                "source":        "HandleSubTask3",
                "username":      user.Username,
                "total_answers": len(answers),
                "task_id":       taskID,
            }).Info("Subtask completed")

			playerResponse := &models.PlayerResponse{
				PlayerID:   user.ID,
				GameID: 	game.ID,
				TaskID:		taskID,
				HasResponse: true,
				Skipped: false,
			}

			storage_db.AddPlayerResponse(playerResponse)

			storage_db.UpdatePlayerStatus(user.ID, models.StatusPlayerNoWaiting)
            
            return c.Send(fmt.Sprintf("@%s, –¥—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∫–∏—Ü—é üêà–û—á—ñ–∫—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –∫–æ–ª–∏ –≤—Å—ñ –ø–æ–¥—Ä—É–∂–∫–∏ –ø–æ–¥—ñ–ª—è—Ç—å—Å—è —Å–≤–æ—î—é –¥—É–º–∫–æ—é üíÅ‚Äç‚ôÄÔ∏è", user.Username))
        }
        
        // Send next question
        return subtasks.SendCurrentQuestion(bot, c, game.ID)
    }
}

// func RegisterCallbackHandlers(bot *telebot.Bot) {
// 	bot.Handle(telebot.OnCallback, func(c telebot.Context) error {
// 		data := c.Callback().Data

// 		utils.Logger.WithFields(logrus.Fields{
// 			"source": "RegisterCallbackHandlers",
// 			"data": data,
// 			"user_id": c.Sender().ID,
// 			"username": c.Sender().Username,
// 			"group": c.Chat().Title,
// 		}).Info("Callback handler called")

// 		switch {
// 		case strings.HasPrefix(data, "\fexit_game_"):
// 			return handleExitGame(bot, c)
// 		case strings.HasPrefix(data, "\fexit_"):
// 			return handleExitConfirm(bot, c)
// 		// case data == "support_menu":
// 		// 	return handleSupportMenu(bot, c)
// 		case data == "\fhelp_menu":
// 			return handleHelpMenu(bot, c)
// 		case data == "\freturn_to_game":
// 			return handleReturnToGame(bot, c)
// 		// case strings.HasPrefix(data, "\fphoto_choice_"):
// 		// 	return HandlePhotoChoice(bot)(c)
// 		case strings.HasPrefix(data,"\fwaiting_" ):
// 			return OnAnswerTaskBtnHandler(bot)(c)
// 		case strings.HasPrefix(data,"\fskip_"):
// 			return OnSkipTaskBtnHandler(bot)(c)
// 		case strings.HasPrefix(data, "subtask_3_"):
// 			return HandleSubTask3(bot)(c)
// 		default:
// 			return nil
// 		}
// 	})
// }

// func CreateCollageFromResultsImage(bot *telebot.Bot) func(c telebot.Context) error {
// 	return func(c telebot.Context) error {
// 		return CreateCollageWithGG()
// 	}
// }

// func CreateCollageWithGG() error {
//     fmt.Println("=== START CREATE COLLAGE ===")
    
//     // Find all images in results folder
//     imagePaths, err := filepath.Glob("results_1/*.jpg")
//     if err != nil {
//         return fmt.Errorf("error reading results folder: %w", err)
//     }
    
//     if len(imagePaths) == 0 {
//         return fmt.Errorf("no images found in results folder")
//     }
    
//     // Limit to 6 images
//     if len(imagePaths) > 6 {
//         imagePaths = imagePaths[:6]
//     }
    
//     fmt.Printf("Finded %d images for collage\n", len(imagePaths))
    
//     // Image cell sizes
//     imageWidth := 540
//     imageHeight := 640
    
//     totalWidth := imageWidth * 2    // 1080
//     totalHeight := imageHeight * 3  // 1920
    
//     fmt.Printf("Create canvas: %dx%d\n", totalWidth, totalHeight)
    
//     dc := gg.NewContext(totalWidth, totalHeight)
    
//     // Very dark background
//     dc.SetRGB(0.05, 0.05, 0.05)
//     dc.Clear()
    
//     // Positions for 2x3 grid - NO MARGINS
//     positions := [][2]int{
//         {0, 0},
//         {imageWidth, 0},
//         {0, imageHeight},
//         {imageWidth, imageHeight},
//         {0, imageHeight * 2},
//         {imageWidth, imageHeight * 2},
//     }
    
//     // Process each image
//     for i, path := range imagePaths {
//         if i >= 6 { break }
        
//         fmt.Printf("Image processing %d: %s\n", i+1, path)
        
//         img, err := gg.LoadImage(path)
//         if err != nil {
//             fmt.Printf("ERROR download of image %s: %v\n", path, err)
//             continue
//         }
        
//         // Enlarging the image scale
//         processedImg := showBiggerImageWithLessMargin(img, imageWidth, imageHeight)
        
//         x := positions[i][0]
//         y := positions[i][1]
        
//         fmt.Printf("Placing an image in position: %d, %d\n", x, y)
        
//         dc.DrawImageAnchored(processedImg, x+imageWidth/2, y+imageHeight/2, 0.5, 0.5)
//     }
    
//     // Reduced text by 20%
//     centerX := totalWidth / 2
//     centerY := totalHeight / 2
    
//     fmt.Println("Add text (reduced by 20%)...")
    
//     // We draw the text graphically - each letter separately
//     drawSmallerText(dc, centerX, centerY)
    
//     fmt.Println("Save file...")
    
//     // Save as JPEG
//     img := dc.Image()
    
//     file, err := os.Create("collage.jpg")
//     if err != nil {
//         return fmt.Errorf("failed to create collage file: %w", err)
//     }
//     defer file.Close()
    
//     err = jpeg.Encode(file, img, &jpeg.Options{Quality: 95})
//     if err != nil {
//         return fmt.Errorf("failed to encode JPEG: %w", err)
//     }
    
//     fmt.Println("=== COLLAGE SAVED AS collage.jpg ===")
//     return nil
// }

// // Show MORE of the image with less padding
// func showBiggerImageWithLessMargin(img image.Image, targetWidth, targetHeight int) image.Image {
//     bounds := img.Bounds()
//     imgWidth := bounds.Dx()
//     imgHeight := bounds.Dy()
    
//     fmt.Printf("Original size: %dx%d\n", imgWidth, imgHeight)
    
//     // Calculate the scale so that the image fills more space
//     scaleX := float64(targetWidth) / float64(imgWidth)
//     scaleY := float64(targetHeight) / float64(imgHeight)
    
//     // Increase fill from 95% to 98% for large images
//     scale := math.Min(scaleX, scaleY) * 0.98
    
//     fmt.Printf("Zoom in: %.2f\n", scale)
    
//     newWidth := int(float64(imgWidth) * scale)
//     newHeight := int(float64(imgHeight) * scale)
    
//     fmt.Printf("Zoom size: %dx%d\n", newWidth, newHeight)
    
//     // Create context scope size
//     dc := gg.NewContext(targetWidth, targetHeight)
    
//     // Darker background for less contrast with padding
//     dc.SetRGB(0.08, 0.08, 0.08)
//     dc.Clear()
    
//     // Center the image
//     offsetX := (targetWidth - newWidth) / 2
//     offsetY := (targetHeight - newHeight) / 2
    
//     fmt.Printf("Bias: %d, %d\n", offsetX, offsetY)
    
//     // Draw a scaled image Offset
//     dc.DrawImageAnchored(img, offsetX+newWidth/2, offsetY+newHeight/2, 0.5, 0.5)
    
//     return dc.Image()
// }

// func drawSmallerText(dc *gg.Context, centerX, centerY int) {
//     // Sizes for text
//     letterHeight := 90.0  // old:150
//     letterWidth := 50.0    // old: 100
//     spacing := 14.0        // old: 20
    
//     // text "MEMORIES"
//     text := "MEMORIES"
//     totalWidth := float64(len(text)) * (letterWidth + spacing) - spacing
    
//     startX := float64(centerX) - totalWidth/2
//     startY := float64(centerY)
    
//     // Reduced background for text
//     bgPadding := 45.0  // old 30
//     dc.SetRGBA(0, 0, 0, 0.4)
//     dc.DrawRoundedRectangle(
//         startX - bgPadding,
//         startY - letterHeight/2 - bgPadding,
//         totalWidth + bgPadding*2,
//         letterHeight + bgPadding*2,
//         16,  // old 20
//     )
//     dc.Fill()
    
//     // draw each letter as simple lines
//     dc.SetRGB(1, 1, 1) // White color
//     dc.SetLineWidth(6)  // old 8
    
//     for i, char := range text {
//         x := startX + float64(i) * (letterWidth + spacing)
//         drawLetter(dc, char, x, startY, letterWidth, letterHeight)
//     }
// }


// // draw each letter as simple lines
// func drawLetter(dc *gg.Context, char rune, x, y, width, height float64) {
//     halfWidth := width / 2
//     halfHeight := height / 2
    
//     switch char {
//     case 'M':
//         // letter M
//         dc.DrawLine(x-halfWidth, y+halfHeight, x-halfWidth, y-halfHeight) 
//         dc.DrawLine(x+halfWidth, y+halfHeight, x+halfWidth, y-halfHeight) 
//         dc.DrawLine(x-halfWidth, y-halfHeight, x, y) 
//         dc.DrawLine(x, y, x+halfWidth, y-halfHeight) 
        
//     case 'E':
//         // letter E
//         dc.DrawLine(x-halfWidth, y-halfHeight, x-halfWidth, y+halfHeight) 
//         dc.DrawLine(x-halfWidth, y-halfHeight, x+halfWidth, y-halfHeight)
//         dc.DrawLine(x-halfWidth, y, x+halfWidth*0.7, y)
//         dc.DrawLine(x-halfWidth, y+halfHeight, x+halfWidth, y+halfHeight)
//         dc.Stroke()
        
//     case 'O':
//         // letter O - –æ–≤–∞–ª
//         dc.DrawEllipse(x, y, halfWidth, halfHeight)
//         dc.Stroke()
        
//     case 'R':
//         // letter R
//         dc.DrawLine(x-halfWidth, y-halfHeight, x-halfWidth, y+halfHeight)
//         dc.DrawLine(x-halfWidth, y-halfHeight, x+halfWidth, y-halfHeight)
//         dc.DrawLine(x+halfWidth, y-halfHeight, x+halfWidth, y)
//         dc.DrawLine(x+halfWidth, y, x-halfWidth, y)
//         dc.DrawLine(x, y, x+halfWidth, y+halfHeight)
//         dc.Stroke()
        
//     case 'I':
//         // letter I
//         dc.DrawLine(x, y-halfHeight, x, y+halfHeight)
//         dc.DrawLine(x-halfWidth*0.5, y-halfHeight, x+halfWidth*0.5, y-halfHeight)
//         dc.DrawLine(x-halfWidth*0.5, y+halfHeight, x+halfWidth*0.5, y+halfHeight)
//         dc.Stroke()
        
//     case 'S':
//         // letter S 
//         dc.DrawLine(x+halfWidth, y-halfHeight, x-halfWidth, y-halfHeight)
//         dc.DrawLine(x-halfWidth, y-halfHeight, x-halfWidth, y)
//         dc.DrawLine(x-halfWidth, y, x+halfWidth, y)
//         dc.DrawLine(x+halfWidth, y, x+halfWidth, y+halfHeight)
//         dc.DrawLine(x+halfWidth, y+halfHeight, x-halfWidth, y+halfHeight)
//         dc.Stroke()
        
//     default:
//         // Unknown letter - draw a rectangle
//         dc.DrawRectangle(x-halfWidth, y-halfHeight, width, height)
//         dc.Stroke()
//     }
// }


// // Helper function to process image for square format
// func processImageForSquare(img image.Image, targetSize int) image.Image {
//     bounds := img.Bounds()
//     imgWidth := bounds.Dx()
//     imgHeight := bounds.Dy()
    
//     // Create new square context
//     dc := gg.NewContext(targetSize, targetSize)
//     dc.SetRGB(1, 1, 1) // white background
//     dc.Clear()
    
//     // Calculate scaling to fit image in square while maintaining aspect ratio
//     scale := math.Min(float64(targetSize)/float64(imgWidth), float64(targetSize)/float64(imgHeight))*0.7
    
//     newWidth := int(float64(imgWidth) * scale)
//     newHeight := int(float64(imgHeight) * scale)
    
//     // Center the scaled image
//     offsetX := (targetSize - newWidth) / 2
//     offsetY := (targetSize - newHeight) / 2
    
//     // Draw the scaled image
//     dc.DrawImageAnchored(img, offsetX+newWidth/2, offsetY+newHeight/2, 0.5, 0.5)
    
//     return dc.Image()
// }

// // Bot handler function for creating collage - updated for JPEG
// func CreateCollageFromResults(bot *telebot.Bot) func(c telebot.Context) error {
//     return func(c telebot.Context) error {
//         chat := c.Chat()
        
//         // Get all images from results folder
//         imagePaths, err := filepath.Glob("results/*.jpg")
//         if err != nil {
//             return c.Send("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
//         }
        
//         if len(imagePaths) == 0 {
//             return c.Send("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É")
//         }
        
//         // Limit to 6 images
//         if len(imagePaths) > 6 {
//             imagePaths = imagePaths[:6]
//         }
        
//         c.Send(fmt.Sprintf("üé® –°—Ç–≤–æ—Ä—é—é –∫–æ–ª–∞–∂ –∑ %d –∑–æ–±—Ä–∞–∂–µ–Ω—å...", len(imagePaths)))
        
//         // Create collage
//         err = CreateCollageWithGG()
//         if err != nil {
//             return c.Send(fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–∞–∂—É: %v", err))
//         }
        
//         // Check if collage file was created
//         if _, err := os.Stat("collage.jpg"); os.IsNotExist(err) {
//             return c.Send("‚ùå –§–∞–π–ª –∫–æ–ª–∞–∂—É –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
//         }
        
//         // Send as photo (JPEG is better supported by Telegram)
//         photo := &telebot.Photo{
//             File:    telebot.FromDisk("collage.jpg"),
//             Caption: "üé® –í–∞—à –∫–æ–ª–∞–∂ –≥–æ—Ç–æ–≤–∏–π!\n\nüì± –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –æ–±–æ—ó–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
//         }
        
//         _, err = bot.Send(chat, photo)
//         if err != nil {
//             return c.Send(fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–∞–∂—É: %v", err))
//         }
        
//         // Also send as document for highest quality
//         document := &telebot.Document{
//             File:     telebot.FromDisk("collage.jpg"),
//             MIME:     "image/jpeg",
//             FileName: "wallpaper_collage.jpg",
//             Caption:  "üì± –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫ –æ–±–æ—ó",
//         }
        
//         bot.Send(chat, document)
        
//         // Clean up - remove the collage file after sending
//         go func() {
//             // Wait a bit to ensure file was sent, then clean up
//             time.Sleep(5 * time.Second)
//             os.Remove("collage.jpg")
//             fmt.Println("Temporary collage file cleaned up")
//         }()
        
//         return nil
//     }
// }

// // Optional: Function to create a quick preview collage (smaller size for testing)
// func CreatePreviewCollage() error {
//     imagePaths, err := filepath.Glob("results/*.jpg")
//     if err != nil {
//         return fmt.Errorf("error reading results folder: %w", err)
//     }
    
//     if len(imagePaths) == 0 {
//         return fmt.Errorf("no images found in results folder")
//     }
    
//     // Limit to 6 images
//     if len(imagePaths) > 6 {
//         imagePaths = imagePaths[:6]
//     }
    
//     // Create smaller canvas for preview
//     dc := gg.NewContext(540, 960) // Half size of main collage
    
//     // Simple white background for preview
//     dc.SetRGB(1, 1, 1)
//     dc.Clear()
    
//     // Calculate smaller layout
//     imageSize := 160
//     spacing := 20
//     marginTop := 50
//     marginSide := (540 - (2*imageSize + spacing)) / 2
    
//     // Positions for 2x3 grid
//     positions := [][2]int{
//         {marginSide, marginTop},
//         {marginSide + imageSize + spacing, marginTop},
//         {marginSide, marginTop + imageSize + spacing},
//         {marginSide + imageSize + spacing, marginTop + imageSize + spacing},
//         {marginSide, marginTop + 2*(imageSize + spacing)},
//         {marginSide + imageSize + spacing, marginTop + 2*(imageSize + spacing)},
//     }
    
//     for i, path := range imagePaths {
//         if i >= 6 { break }
        
//         img, err := gg.LoadImage(path)
//         if err != nil {
//             continue
//         }
        
//         processedImg := processImageForSquare(img, imageSize)
        
//         x := positions[i][0]
//         y := positions[i][1]
        
//         dc.DrawImageAnchored(processedImg, x+imageSize/2, y+imageSize/2, 0.5, 0.5)
//     }
    
//     // Save preview as JPEG
//     img := dc.Image()
    
//     file, err := os.Create("collage_preview.jpg")
//     if err != nil {
//         return fmt.Errorf("failed to create preview file: %w", err)
//     }
//     defer file.Close()
    
//     err = jpeg.Encode(file, img, &jpeg.Options{Quality: 85})
//     if err != nil {
//         return fmt.Errorf("failed to encode preview JPEG: %w", err)
//     }
    
//     fmt.Println("Preview collage saved as collage_preview.jpg")
//     return nil
// }