package handlers

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	//"strings"
	"time"

	"github.com/ArtemHvozdov/tg-game-bot.git/models"
	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"

	//"github.com/ArtemHvozdov/tg-game-bot.git/utils"

	"gopkg.in/telebot.v3"
)

// type AwaiteState struct {
// 	StartStateAwait bool
// 	NameGameRoomAwait bool
// 	NameGameAwait bool
// 	QuestionsAwait bool
// }

// var botState = AwaiteState{}

// Handler for /start
func StartHandler(bot *telebot.Bot, btnCreateGame, btnHelpMe telebot.Btn) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		user := c.Sender()
		startMsg := "–û—É, –ø—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –•–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –¥–ª—è —Å–≤–æ—ó—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø–æ–¥—Ä—É–≥? –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —ñ –≤–ø–µ—Ä–µ–¥ –¥–æ –ø—Ä–∏–≥–æ–¥!"

		// Create keyboard
		menu := &telebot.ReplyMarkup{ResizeKeyboard: true}
		//.Reply(menu.Row(btnCreateGame, btnJoinGame, btnHelpMe))

		// Buttons on the first line
		menuBtns := menu.Row(btnCreateGame, btnHelpMe)
		// Button on the second row (all size)
		//row2 := menu.Row(btnHelpMe)

		menu.Reply(menuBtns)

		// Get ID game fron invite-link
		inviteData := c.Data() // Get string before /start
		gameID, err := strconv.Atoi(inviteData)
		if err == nil && gameID > 0 { // Check that number is correct
			// Get info about game from DB
			game, err := storage_db.GetGameById(gameID)
			if err != nil || gameID == 0 {
				return c.Send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.") 
			}

			player := &models.Player{
				ID:       user.ID,
				UserName: user.Username,
				Name:     user.FirstName,
				Passes:   0,
				GameID:   game.ID,
				Role:     "player",
			}

			if err := storage_db.AddPlayerToGame(player); err != nil {
				log.Printf("Failed to add player to game: %v", err)
				return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
			}

			notifyPlayerJoined(bot, game.ID, *player)

			successMsg := fmt.Sprintf(
				"–ô–µ–π! –¢–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∞—Å—è –¥–æ –≥—Ä–∏ '%s'. üéâ –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—Å—ñ –∑–±–µ—Ä—É—Ç—å—Å—è, —ñ –º–æ–∂–Ω–∞ –±—É–¥–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
				game.Name,
			)
			return c.Send(successMsg)
		}


		// If this is not invite-link, send start-message
		c.Send(startMsg, menu)

		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
			return tc.Send("ü§î –ó–∞—Ä–∞–∑ —è –Ω–µ –æ—á—ñ–∫—É—é –≤—ñ–¥ —Ç–µ–±–µ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏, –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.")
		})

		return nil
	}
}

/// Handler create game
func CreateGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		//userAdmin := c.Sender()
		gameStartMsg := `–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:
1. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø—É
2. –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ —Ü—é –≥—Ä—É–ø—É –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω–∞
3. –£ –≥—Ä—É–ø—ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /check_admin_bot`


		// Ask tha name game
		if err := c.Send(gameStartMsg); err != nil {
			return err
		}

		//var gameName string

		bot.Handle(telebot.OnText, func(tc telebot.Context) error {
            chat := tc.Chat()
			user := tc.Sender()

			if chat.Type != telebot.ChatPrivate {
				warningMsg := fmt.Sprintf("@%s, —è –ø–æ–∫–∏ –Ω–µ –≤–º—ñ—é –æ–±—Ä–æ–±–ª—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–æ—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏ —ñ —è —Å–∫–æ—Ä–æ –Ω–∞–≤—á—É—Å—å‚úã", user.Username)
				tc.Send(warningMsg)
			}
            // Move on to collecting questions
            return nil
        })

        return nil
	}
}

// Handler join to game
func JoinGameHandler(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		
		return c.Send("–¢–≤–æ—ó –ø–æ–¥—Ä—É–≥–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è –≥—Ä–∏? üè† –¢–æ–¥—ñ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")
	}
}

func HelpMeHandler(bot *telebot.Bot) func (c telebot.Context) error {
	return func(c telebot.Context) error {
		helpText := `
			–ü—Ä–∏–≤—ñ—Ç, –∑—ñ—Ä–æ–Ω—å–∫–æ! üåü –Ø –±–æ—Ç –¥–ª—è —ñ–≥–æ—Ä –∑ –ø–æ–¥—Ä—É–≥–∞–º–∏ –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ –±–æ—Ç–∞ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É –∞–±–æ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

–í –≥—Ä—ñ —Ç–∏ –º–æ–∂–µ—à:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
- –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∏)
- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥—Ä—É–∑—ñ–≤

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–•–µ–ª–ø –º—ñ" –≤ –º–µ–Ω—é!
		`
		return c.Send(helpText)
	}
}

func notifyPlayerJoined(bot *telebot.Bot, gameID int, player models.Player) {
	// Notify all players in the game that a new player has joined
	allPlayers, err := storage_db.GetAllPlayersByGameID(gameID)
	if err != nil {
		log.Printf("Failed to get players for game %d: %v", gameID, err)
		return
	}

	for _, p := range allPlayers {
		if p.ID != player.ID { // Don't notify the new player
			msg := fmt.Sprintf("üéâ –ì—Ä–∞–≤–µ—Ü—å %s –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!", player.UserName)
			bot.Send(&telebot.Chat{ID: p.ID}, msg)
		}

	}
}

// CheckAdminBotHandler handles the /check_admin_bot command
func CheckAdminBotHandler(bot *telebot.Bot, btnStartGame telebot.Btn) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		// Step 1: Ensure the command is used in a group chat
		if c.Chat().Type == telebot.ChatPrivate {
			return c.Send("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ ‚úã")
		}

		chat := c.Chat()
		user := c.Sender()
		//chatID := chat.ID
		//userID := user.ID
		username := user.Username

		// Step 2: Check if the user is an admin in the group
		memberUser, err := bot.ChatMemberOf(chat, user)
		if err != nil {
			log.Printf("Error fetching user's role in the group: %v", err)
			return nil
		}

		if memberUser.Role != telebot.Administrator && memberUser.Role != telebot.Creator {
			// Notify the group the user is not an admin
			warnMsg := fmt.Sprintf("@%s, —Ü—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –≥—Ä—É–ø–∏ üö´", username)
			groupMsg, err := bot.Send(chat, warnMsg)
			if err != nil {
				log.Printf("Error sending non-admin warning: %v", err)
				return err
			}

			// Try deleting the messages after 30 seconds
			go func() {
				time.Sleep(30 * time.Second)
				_ = bot.Delete(groupMsg)
				err = bot.Delete(c.Message())
				if err != nil {
					log.Printf("Error deleting non-admin warning: %v", err)
				}
			}()

			return nil
		}

		// Step 3: Check if the bot itself is an admin
		memberBot, err := bot.ChatMemberOf(chat, &telebot.User{ID: bot.Me.ID})
		if err != nil {
			log.Printf("Error fetching bot's role in the group: %v", err)
			bot.Send(chat, "–Ø –Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—é —Ä–æ–ª—å —É –≥—Ä—É–ø—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤ –º–µ–Ω–µ —î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞ ü§ñ")
			return nil
		}

		if memberBot.Role != telebot.Administrator && memberBot.Role != telebot.Creator {
			notAdminMsg, err := bot.Send(chat, "–Ø –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É —Ü—ñ–π –≥—Ä—É–ø—ñ. –î–æ–¥–∞–π –º–µ–Ω–µ —è–∫ –∞–¥–º—ñ–Ω–∞, –±—É–¥—å –ª–∞—Å–∫–∞ üôè")
			if err != nil {
				log.Printf("Error sending bot admin warning: %v", err)
			}

			time.Sleep(30 * time.Second)
			err = bot.Delete(c.Message())
			if err != nil {
				log.Printf("Error deleting user message: %v", err)
			}
			_ = bot.Delete(notAdminMsg)

			return nil
		}

		// Step 4: All checks passed, notify in group and proceed in private
		groupSuccessMsg := fmt.Sprintf("@%s, —è –≤—Å–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–≤ ‚úÖ –ü–æ–≤–µ—Ä–Ω–∏—Å—å –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑—ñ –º–Ω–æ—é, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏. –ß–µ–∫–∞—é —Ç–µ–±–µ... üåü", username)
		groupMsg, err := bot.Send(chat, groupSuccessMsg)
		if err != nil {
			log.Printf("Error sending success message to group: %v", err)
			return err
		}

		// Try deleting the group messages after 1 minute
		go func() {
			time.Sleep(1 * time.Minute)
			_ = bot.Delete(groupMsg)
			_ = bot.Delete(c.Message())
		}()

		// Continue interaction in private chat
		privateMsg := "–£—Ö—Ö, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫—É! –ì—Ä—É–ø—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ —è –º–∞—é –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ°Ô∏è\n–ô–¥–µ–º–æ –¥–∞–ª—ñ..."
		_, err = bot.Send(user, privateMsg)
		if err != nil {
			log.Printf("Error sending private message to user: %v", err)
			return err
		}

		gameName := chat.Title
		inviteChatLink, err := GenerateChatInviteLink(bot, chat)
		if err != nil {
			log.Printf("Error generating invite link: %v", err)
		}

		bot.Send(user, fmt.Sprintf("–¢–µ–ø–µ—Ä —è –º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É '%s' –∑ —ñ–Ω–≤–∞–π—Ç-—Å—Å–∏–ª–∫–æ—é: %s", gameName, inviteChatLink))

		game, err := storage_db.CreateGame(gameName, inviteChatLink, chat.ID)
		if err != nil {
			log.Printf("Error creating game: %v", err)
		}

		playerAdmin := &models.Player{
			ID: user.ID,
			UserName: user.Username,
			Name: user.FirstName,
			Passes: 0,
			GameID: game.ID,
			Role: "admin",
		}
		
		if err := storage_db.AddPlayerToGame(playerAdmin); err != nil {
			log.Printf("Failed to add player-admin to game: %v", err)
			return c.Send("–û–π, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
		}

		menu := &telebot.ReplyMarkup{ResizeKeyboard: true}
		row1 := menu.Row(btnStartGame)
		menu.Reply(row1)

		time.Sleep(700 * time.Millisecond)	

		
		bot.Send(chat, "–¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, –∫–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç—É –≥—Ä—É! üéÆ", menu)

		return nil
	}
}

func CreateGame(groupChat *telebot.Chat, user *telebot.User) error {
	return nil
}

func GenerateChatInviteLink(bot *telebot.Bot, chat *telebot.Chat) (string, error) {
	params := map[string]interface{}{
		"chat_id": chat.ID,
	}

	raw, err := bot.Raw("exportChatInviteLink", params)
	if err != nil {
		log.Printf("Error generating invite link: %v", err)
		return "", fmt.Errorf("failed to export chat invite link: %w", err)
	}

	// Struct of response Telegram API
	var result struct {
		Result string `json:"result"`
	}

	err = json.Unmarshal(raw, &result)
	if err != nil {
		log.Printf("Error parsing invite link response: %v", err)
		return "", fmt.Errorf("failed to parse invite link response: %w", err)
	}

	return result.Result, nil
}


// StartGameHandlerFoo handles the "start_game" button press in a group chat
func StartGameHandlerFoo(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		log.Println("StartGameHandlerFoo called")
		
		chat := c.Chat()
		user := c.Sender()
		memberUser, _ := bot.ChatMemberOf(chat, user)

		log.Println("StartGameHandlerFoo logs: User:", user.Username, "Chat Name:", chat.Title)

		// Checking: this have to be a group chat
		if chat.Type == telebot.ChatPrivate {
			c.Send("–¶—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ üßë‚Äçü§ù‚Äçüßë")
			return nil
		}

		if chat.Type == telebot.ChatGroup && memberUser.Role != telebot.Administrator && memberUser.Role != telebot.Creator {
			warningMsg := fmt.Sprintf("@%s, –Ω–µ —Ç—Ä–µ–±–∞ —Ç–∏—Ü—è—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∑–∞—Ä–∞–∑ —Ç–µ—Å—Ç—É—é—Ç—å—Å—è –Ω–æ–≤—ñ —Ñ—ñ—á—ñ! üö´", user.Username)
			// c.Send(warningMsg)
			_, err := bot.Send(chat, warningMsg)
			if err != nil {
				log.Println("Error sending warning message in the chat:", err)
			}
			return nil
		}

		startGameMsg := `–ü–†–ò–í–Ü–¢, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –§—ñ–±—ñ üòä, —ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∏ —Ç–∏–∂–Ω—ñ —è –±—É–¥—É –≤–∞—à–∏–º –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–æ–º —É –≥—Ä—ñ ‚ú® –ì—Ä—ñ, –∑ —è–∫–æ—ó –≤–∏–π–¥—É—Ç—å –ø–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—è–º–∏ –≤—Å—ñ, —è–∫—â–æ –ø–æ–¥—ñ–ª—è—Ç—å—Å—è –æ–¥–Ω–∞ –∑ –æ–¥–Ω–æ—é —Å–≤–æ—ó–º –æ—Å–æ–±–ª–∏–≤–∏–º —Å–∫–∞—Ä–±–æ–º ‚Äì —É–≤–∞–≥–æ—é. –í—ñ–¥ –≤–∞—Å –≤–∏–º–∞–≥–∞—î—Ç—å—Å—è —Ç—Ä–æ—à–∫–∏ —á–∞—Å—É —ñ –≥–æ—Ç–æ–≤–µ –¥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å —Å–µ—Ä–¥–µ–Ω—å–∫–æ, –≤—ñ–¥ –º–µ–Ω–µ ‚Äì —Ü—ñ–∫–∞–≤–∞ –ø—Ä–∏–≥–æ–¥–∞, —è–∫—É —è –∑–∞–≥–æ—Ä–Ω—É–ª–∞ —É —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å–ø—ñ–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.

–ö–æ–∂–Ω–∞ –¥—Ä—É–∂–±–∞ - –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω–∞, —è–∫ –±—É–ª–æ—á–∫–∞, –ø–æ–≤–Ω–∞ —Ä–æ–¥–∑–∏–Ω–æ–∫ üçá –ú–∏ –±—É–¥–µ–º–æ –≤—ñ–¥—â–∏–ø—É–≤–∞—Ç–∏ —à–º–∞—Ç–æ—á–æ–∫ –∑–∞ —à–º–∞—Ç–æ—á–∫–æ–º, –≤–∏–∫–æ–Ω—É—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –ù–∞ –∫–æ–∂–Ω–µ —É –≤–∞—Å –±—É–¥–µ 48 –≥–æ–¥–∏–Ω —ñ –Ω–µ–∑–ª—ñ—á–µ–Ω–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤–∞—à–∏—Ö –±–µ—Å—Ç—ñ. –Ø–∫—â–æ —è–∫–∞—Å—å —Ä–æ–¥–∑–∏–Ω–∫–∞ –≤–∞–º –Ω–µ –¥–æ —Å–º–∞–∫—É, –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ê–ª–µ —Ç–∞–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫—ñ–≤ –∑–∞ –≤—Å—é –≥—Ä—É –∫–æ–∂–Ω—ñ–π —É—á–∞—Å–Ω–∏—Ü—ñ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è –ª–∏—à–µ 3.

–¢–∞–∫–æ–∂ —î –∞–≤–∞—Ä—ñ–π–Ω–∞ –∫–Ω–æ–ø–∫–∞, —â–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ —Ü—é –≥—Ä—É —Ä–∞–Ω—ñ—à–µ (–∞–ª–µ —è –≤–∞–º —Ç–æ—á–Ω–æ –Ω–µ —Å–∫–∞–∂—É, –¥–µ –≤–æ–Ω–∞, –±–æ –¥—É–∂–µ —Ö–æ—á—É, —â–æ–± –≤–∏ —Ç–∞–Ω—Ü—é–≤–∞–ª–∏ –Ω–∞ —Ü—ñ–π –≤–µ—á—ñ—Ä—Ü—ñ –¥–æ —Ä–∞–Ω–∫—É). –ê —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–∏—Å–∞—Ç–∏—Å—è –¥–æ –¥—ñ-–¥–∂–µ—è, —è–∫–∏–π —Å—Ç–∞–≤–∏—Ç—å –º—É–∑–∏–∫—É –Ω–∞ —Ç–æ–º—É –±–æ—Ü—ñ (—Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞).

–í–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–µ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —ñ —á–µ—Å–Ω—ñ—Å—Ç—å –º–∏ –ø–æ–º–Ω–æ–∂–∏–º–æ –Ω–∞ —Å–ø–æ–≥–∞–¥–∏ —ñ –≥—É–º–æ—Ä. –ê –ø–æ–∫–∏ —â–æ —Ç—Ä–∏–º–∞–π—Ç–µ –≤ –≥–æ–ª–æ–≤—ñ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ ‚Äì —Ö–µ–≤ —Ñ–∞–Ω - —ñ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è —á–∞—Å–æ–º, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–º —Ä–∞–∑–æ–º!`

		time.Sleep(600 * time.Millisecond) // Wait for 2 seconds before sending the next message
		_, err := bot.Send(chat, startGameMsg)
		if err != nil {
			log.Printf("Error sending welcome start game message: %v", err)
		}

		return nil
	}
}

func HandleUserJoined(bot *telebot.Bot) telebot.HandlerFunc {
    return func(c telebot.Context) error {
        user := c.Sender()
        chat := c.Chat()

        log.Printf("User %s (%d) joined to chat %s (%d)\n",
            user.Username, user.ID, chat.Title, chat.ID)

		// Getting gamer by chat ID
        game, err := storage_db.GetGameByChatId(chat.ID)
        if err != nil {
            log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä—É –¥–ª—è —á–∞—Ç–∞ %d: %v", chat.ID, err)
            return nil
        }

        log.Printf("Add user to game: %s (id: %d)", game.Name, game.ID)

        player := &models.Player{
            ID:       user.ID,
            UserName: user.Username,
            Name:     user.FirstName,
            Passes:   0,
            GameID:   game.ID,
            Role:     "player",
        }

		// Add player to game
        if err := storage_db.AddPlayerToGame(player); err != nil {
            log.Printf("Failed to add player to game: %v", err)
            warningMsg := fmt.Sprintf("@%s, –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –≥—Ä–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!", user.Username)
            bot.Send(chat, warningMsg)
			return nil
        }

		bot.Send(chat, fmt.Sprintf("üéâ–ü—Ä–∏–≤—ñ—Ç %s. –ß–µ–∫–∞—î–º–æ —â–µ –ø–æ–¥—Ä—É–≥ —ñ —Å–∫–æ—Ä–æ –ø–æ—á–Ω–µ–º–æ –≥—Ä—É!", user.Username))

        return nil
    }
}
