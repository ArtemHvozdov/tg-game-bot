package voting

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strings"
	"sync"
	"time"

	"github.com/ArtemHvozdov/tg-game-bot.git/storage_db"
	"github.com/ArtemHvozdov/tg-game-bot.git/utils"
	"gopkg.in/telebot.v3"
)

// Subtask structure for loading from JSON
type Subtask struct {
	ID          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

// PollSession manages native Telegram poll voting for subtasks
// type PollSession struct {
// 	GameID      int
// 	Subtasks    []Subtask
// 	PollID      string        // ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ poll'–∞
// 	PollMessage *telebot.Message // –°–æ–æ–±—â–µ–Ω–∏–µ —Å poll'–æ–º
// 	StartTime   time.Time
// 	IsActive    bool
// 	IsCompleted bool
// 	mutex       sync.RWMutex
// }

// Update PollSession version
type PollSession struct {
	GameID        int
	Subtasks      []Subtask
	PollID        string
	PollMessage   *telebot.Message
	MainTaskMsg   *telebot.Message // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è
	StartTime     time.Time
	IsActive      bool
	IsCompleted   bool
	mutex         sync.RWMutex
}

// PollManager manages poll sessions
type PollManager struct {
	sessions map[int]*PollSession    // gameID -> session
	pollGame map[string]int          // pollID -> gameID (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
	mutex    sync.RWMutex
}

var GlobalPollManager = &PollManager{
	sessions: make(map[int]*PollSession),
	pollGame: make(map[string]int),
}

// youtubeLinks := map[int]string{
// 		1: "https://www.youtube.com/shorts/Cb5ljmm3820?si=qWu3oIgz890cV0xo", // Lady Gaga - Paparazzi
// 		2: "https://www.youtube.com/watch?v=Mkuw7vdi-VA", // Phoebe Buffay - Smelly Cat
// 		3: "", // –î–ª—è –º–µ–º–æ–≤ YouTube –Ω–µ –Ω—É–∂–µ–Ω
// 	}


func processTaskDescription(subtaskID int, description string) string {
	// –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID —Å–∞–±—Ç–∞—Å–∫–∏ –∫ YouTube —Å—Å—ã–ª–∫–∞–º
	youtubeLinks := map[int]string{
		1: "https://www.youtube.com/shorts/Cb5ljmm3820?si=qWu3oIgz890cV0xo", // Lady Gaga - Paparazzi
		2: "https://www.youtube.com/watch?v=Mkuw7vdi-VA", // Phoebe Buffay - Smelly Cat
		3: "", // –î–ª—è –º–µ–º–æ–≤ YouTube –Ω–µ –Ω—É–∂–µ–Ω
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–∞–±—Ç–∞—Å–∫—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
	switch subtaskID {
	case 1: // –¢–∞–Ω—Ü—ã –ø–æ–¥ Lady Gaga
		processed := description
		if link, exists := youtubeLinks[subtaskID]; exists && link != "" {
			// –ó–∞–º–µ–Ω—è–µ–º "—Ü—å–æ–≥–æ" –Ω–∞ —Å—Å—ã–ª–∫—É
			processed = strings.Replace(processed, "—Ü—å–æ–≥–æ", `<a href="https://www.youtube.com/shorts/Cb5ljmm3820?si=qWu3oIgz890cV0xo">—Ü—å–æ–≥–æ</a>`, 1)
		}
		return processed

	case 2: // –ü–µ–Ω–∏–µ Smelly Cat
		processed := description
		if link, exists := youtubeLinks[subtaskID]; exists && link != "" {
			// –ó–∞–º–µ–Ω—è–µ–º "—Ç—É—Ç" –Ω–∞ —Å—Å—ã–ª–∫—É
			processed = strings.Replace(processed, "—Ç—É—Ç", `<a href="https://www.youtube.com/watch?v=Mkuw7vdi-VA">—Ç—É—Ç</a>`, 1)
		}

		// –ò—â–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
		// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
		patterns := []string{"ü•π:\\n", "ü•π:\n", "ü•π:"}
		songTextStart := -1
		patternLength := 0
		
		for _, pattern := range patterns {
			if idx := strings.Index(processed, pattern); idx != -1 {
				songTextStart = idx
				patternLength = len(pattern)
				break
			}
		}
		
		songTextEnd := strings.Index(processed, "\n\n–ü–æ—Ç—Ä–µ–Ω—É–π—Ç–µ—Å—è")
		
		if songTextStart != -1 && songTextEnd != -1 && songTextEnd > songTextStart {
			// –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
			beforeSong := processed[:songTextStart+len("ü•π:")] // —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ
			songText := processed[songTextStart+patternLength:songTextEnd]
			afterSong := processed[songTextEnd:]

			// –û—á–∏—â–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
			songText = strings.TrimLeft(songText, "\\n\n ")

			// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
			songLines := strings.Split(songText, "\n")
			var formattedLines []string
			
			// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
			formattedLines = append(formattedLines, "")
			
			for _, line := range songLines {
				line = strings.TrimSpace(line)
				if line != "" {
					formattedLines = append(formattedLines, "<em>"+line+"</em>")
				}
			}

			// –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			formattedSongText := strings.Join(formattedLines, "\n")
			processed = beforeSong + "\n" +formattedSongText + afterSong
		}
		
		return processed

	case 3: // –ú–µ–º—ã - YouTube –Ω–µ –Ω—É–∂–µ–Ω
		return description

	default:
		return description
	}
}

// Load subtasks from JSON file
func loadSubtask5() ([]Subtask, error) {
	data, err := ioutil.ReadFile("internal/data/tasks/subtasks/subtask_5.json")
	if err != nil {
		return nil, fmt.Errorf("failed to read subtask_5.json: %v", err)
	}

	var subtasks []Subtask
	err = json.Unmarshal(data, &subtasks)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal subtasks: %v", err)
	}

	return subtasks, nil
}

// StartPollVoting - –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram Poll
// StartPollVoting - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
func (pm *PollManager) StartPollVoting(gameID int) (*PollSession, error) {
	pm.mutex.Lock()
	defer pm.mutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
	if session, exists := pm.sessions[gameID]; exists && session.IsActive {
		return nil, fmt.Errorf("voting already active for game %d", gameID)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	subtasks, err := loadSubtask5()
	if err != nil {
		return nil, fmt.Errorf("failed to load subtasks: %v", err)
	}

	if len(subtasks) == 0 {
		return nil, fmt.Errorf("no subtasks found")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –æ–±–Ω—É–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
	session := &PollSession{
		GameID:      gameID,
		Subtasks:    subtasks,
		StartTime:   time.Now(),
		IsActive:    true,
		IsCompleted: false,
		MainTaskMsg: nil, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ CreateTelegramPoll
		PollMessage: nil, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ CreateTelegramPoll
	}

	pm.sessions[gameID] = session

	utils.Logger.Infof("Created poll session for game %d with %d options", gameID, len(subtasks))
	return session, nil
}

// CreateTelegramPoll - —Å–æ–∑–¥–∞–µ—Ç Telegram poll –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ
func (pm *PollManager) CreateTelegramPoll(bot *telebot.Bot, chatID int64, session *PollSession, mainTaskText string, keyboard *telebot.ReplyMarkup) error {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ titles
	var options []string
	for _, subtask := range session.Subtasks {
		options = append(options, subtask.Title)
	}

	question := "üó≥Ô∏è –û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:"
	
	// –°–æ–∑–¥–∞–µ–º poll —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ Raw
	data := map[string]interface{}{
		"chat_id":                chatID,
		"question":               question,
		"options":                options,
		"is_anonymous":           false,
		"type":                   "regular",
		"allows_multiple_answers": false,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –°–û–•–†–ê–ù–Ø–ï–ú –µ–≥–æ
	chat := &telebot.Chat{ID: chatID}
	mainTaskMsg, err := bot.Send(chat, mainTaskText, telebot.ModeMarkdown)
	if err != nil {
		return fmt.Errorf("failed to send main task message: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	session.MainTaskMsg = mainTaskMsg

	time.Sleep(200 * time.Millisecond)
	
	resp, err := bot.Raw("sendPoll", data)
	if err != nil {
		return fmt.Errorf("failed to send poll via Raw API: %v", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
	var result struct {
		Ok     bool `json:"ok"`
		Result struct {
			MessageID int `json:"message_id"`
			Poll      struct {
				ID      string `json:"id"`
				Question string `json:"question"`
				Options []struct {
					Text       string `json:"text"`
					VoterCount int    `json:"voter_count"`
				} `json:"options"`
			} `json:"poll"`
		} `json:"result"`
	}

	if err := json.Unmarshal(resp, &result); err != nil {
		return fmt.Errorf("failed to unmarshal poll response: %v", err)
	}

	if !result.Ok {
		return fmt.Errorf("API returned not ok")
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message –¥–ª—è poll'–∞
	pollMsg := &telebot.Message{
		ID: result.Result.MessageID,
		Chat: &telebot.Chat{ID: chatID},
		Poll: &telebot.Poll{
			ID:       result.Result.Poll.ID,
			Question: result.Result.Poll.Question,
		},
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ poll'–µ
	pm.mutex.Lock()
	session.PollID = pollMsg.Poll.ID
	session.PollMessage = pollMsg
	pm.pollGame[pollMsg.Poll.ID] = session.GameID
	pm.mutex.Unlock()

	utils.Logger.Infof("Created Telegram poll %s for game %d", pollMsg.Poll.ID, session.GameID)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
	go pm.startPollTimer(bot, chatID, session, keyboard)

	return nil
}


// startPollTimer - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
// startPollTimer - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
// startPollTimer - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
func (pm *PollManager) startPollTimer(bot *telebot.Bot, chatID int64, session *PollSession, keyboard *telebot.ReplyMarkup) {
	// time.Sleep(15 * time.Second)
	time.Sleep(1 * time.Minute)

	// –ù–ï –≤—ã–∑—ã–≤–∞–µ–º bot.StopPoll –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ ProcessPollResults
	utils.Logger.Infof("Poll timer expired for game %d, processing results...", session.GameID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (stopPoll –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏)
	winner, err := pm.ProcessPollResultsWithBot(bot, session.GameID)
	if err != nil {
		utils.Logger.Errorf("Failed to process poll results: %v", err)
		return
	}

	// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ...
	processedDescription := processTaskDescription(winner.ID, winner.Description)
	
	utils.Logger.Infof("Processing subtask ID %d, original description length: %d, processed length: %d", 
		winner.ID, len(winner.Description), len(processedDescription))

	chat := &telebot.Chat{ID: chatID}
	winnerMessage := fmt.Sprintf("üéâ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n\n%s\n\n%s",
		winner.Title, processedDescription)

	_, err = bot.Send(chat, winnerMessage, keyboard, telebot.ModeHTML)
	if err != nil {
		utils.Logger.Errorf("Failed to send winner message: %v", err)
	}

	go pm.cleanupMessages(bot, session)

	utils.Logger.Infof("Poll voting completed for game %d, selected subtask ID: %d", session.GameID, winner.ID)
}

// ProcessPollResultsWithBot - –≤–µ—Ä—Å–∏—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ bot –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
func (pm *PollManager) ProcessPollResultsWithBot(bot *telebot.Bot, gameID int) (*Subtask, error) {
	// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ bot
	return pm.ProcessPollResults(bot, gameID)
}

// cleanupMessages - —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
func (pm *PollManager) cleanupMessages(bot *telebot.Bot, session *PollSession) {
	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	time.Sleep(3 * time.Second)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
	if session.MainTaskMsg != nil {
		err := bot.Delete(session.MainTaskMsg)
		if err != nil {
			utils.Logger.Errorf("Failed to delete main task message: %v", err)
		} else {
			utils.Logger.Infof("Deleted main task message for game %d", session.GameID)
		}
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
	if session.PollMessage != nil {
		err := bot.Delete(session.PollMessage)
		if err != nil {
			utils.Logger.Errorf("Failed to delete poll message: %v", err)
		} else {
			utils.Logger.Infof("Deleted poll message for game %d", session.GameID)
		}
	}
}

// ProcessPollResults - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
// ProcessPollResults - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
// ProcessPollResults - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
func (pm *PollManager) ProcessPollResults(bot *telebot.Bot, gameID int) (*Subtask, error) {
	pm.mutex.Lock()
	defer pm.mutex.Unlock()

	session, exists := pm.sessions[gameID]
	if !exists {
		return nil, fmt.Errorf("no poll session found for game %d", gameID)
	}

	session.mutex.Lock()
	defer session.mutex.Unlock()

	session.IsActive = false
	session.IsCompleted = true

	utils.Logger.Infof("=== POLL RESULTS FOR GAME %d ===", gameID)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ stopPoll response
	stopPollData := map[string]interface{}{
		"chat_id":    session.PollMessage.Chat.ID,
		"message_id": session.PollMessage.ID,
	}

	resp, err := bot.Raw("stopPoll", stopPollData)
	if err != nil {
		utils.Logger.Errorf("Failed to stop poll and get results: %v", err)
		return pm.fallbackProcessResults(session, gameID)
	}

	var pollResult struct {
		Ok     bool `json:"ok"`
		Result struct {
			ID      string `json:"id"`
			Question string `json:"question"`
			Options []struct {
				Text       string `json:"text"`
				VoterCount int    `json:"voter_count"`
			} `json:"options"`
			TotalVoterCount int  `json:"total_voter_count"`
			IsClosed        bool `json:"is_closed"`
		} `json:"result"`
	}

	if err := json.Unmarshal(resp, &pollResult); err != nil {
		utils.Logger.Errorf("Failed to unmarshal poll results: %v", err)
		return pm.fallbackProcessResults(session, gameID)
	}

	if !pollResult.Ok {
		utils.Logger.Errorf("API returned not ok for poll results")
		return pm.fallbackProcessResults(session, gameID)
	}

	maxVotes := 0
	var winningIndexes []int

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	for i, option := range pollResult.Result.Options {
		voteCount := option.VoterCount
		if i < len(session.Subtasks) {
			utils.Logger.Infof("Option %d ('%s'): %d votes", i, session.Subtasks[i].Title, voteCount)

			if voteCount > maxVotes {
				maxVotes = voteCount
				winningIndexes = []int{i}
			} else if voteCount == maxVotes {
				winningIndexes = append(winningIndexes, i)
			}
		}
	}

	// –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ - —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º ID)
	var winner Subtask
	if len(winningIndexes) > 0 {
		winnerIndex := winningIndexes[0]
		winner = session.Subtasks[winnerIndex]

		// –ü—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –≤—ã–±–∏—Ä–∞–µ–º —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º ID
		for _, index := range winningIndexes[1:] {
			if session.Subtasks[index].ID < winner.ID {
				winner = session.Subtasks[index]
				winnerIndex = index
			}
		}

		utils.Logger.Infof("Winner: Option %d - Subtask %d ('%s') with %d votes",
			winnerIndex, winner.ID, winner.Title, maxVotes)
	} else {
		// –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
		winner = session.Subtasks[0]
		utils.Logger.Infof("No votes received, selecting first option: Subtask %d ('%s')",
			winner.ID, winner.Title)
	}

	utils.Logger.Infof("Total votes in poll: %d", pollResult.Result.TotalVoterCount)
	utils.Logger.Infof("=== END POLL RESULTS ===")

	// –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
	delete(pm.pollGame, session.PollID)
	delete(pm.sessions, gameID)

	return &winner, nil
}

// fallbackProcessResults - —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (pm *PollManager) fallbackProcessResults(session *PollSession, gameID int) (*Subtask, error) {
	utils.Logger.Infof("Using fallback method for poll results processing")
	
	// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	if len(session.Subtasks) > 0 {
		winner := session.Subtasks[0]
		utils.Logger.Infof("Fallback: selecting first option: Subtask %d ('%s')", winner.ID, winner.Title)
		
		// –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
		delete(pm.pollGame, session.PollID)
		delete(pm.sessions, gameID)
		
		return &winner, nil
	}
	
	return nil, fmt.Errorf("no subtasks available for fallback")
}

// GetSessionByPollID - –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ ID poll'–∞
func (pm *PollManager) GetSessionByPollID(pollID string) (*PollSession, bool) {
	pm.mutex.RLock()
	defer pm.mutex.RUnlock()

	if gameID, exists := pm.pollGame[pollID]; exists {
		if session, sessionExists := pm.sessions[gameID]; sessionExists {
			return session, true
		}
	}
	return nil, false
}

// IsActive - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
func (pm *PollManager) IsActive(gameID int) bool {
	pm.mutex.RLock()
	defer pm.mutex.RUnlock()

	session, exists := pm.sessions[gameID]
	return exists && session.IsActive
}

// ==========================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
// ==========================================

// StartSubtask5VotingDirect - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ SendTasks)
func StartSubtask5VotingDirect(bot *telebot.Bot, chatID int64, mainTaskText string, keyboard *telebot.ReplyMarkup) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	game, err := storage_db.GetGameByChatId(chatID)
	if err != nil {
		utils.Logger.Errorf("Failed to get game by chat ID %d: %v", chatID, err)
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	session, err := GlobalPollManager.StartPollVoting(game.ID)
	if err != nil {
		utils.Logger.Errorf("Failed to start poll voting: %v", err)
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram poll
	err = GlobalPollManager.CreateTelegramPoll(bot, chatID, session, mainTaskText, keyboard)
	if err != nil {
		utils.Logger.Errorf("Failed to create Telegram poll: %v", err)
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: %v", err)
	}

	utils.Logger.Infof("Successfully started Telegram poll voting for game %d", game.ID)
	return nil
}

// HandlePollAnswer - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ poll (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
func HandlePollAnswer(bot *telebot.Bot) func(c telebot.Context) error {
	return func(c telebot.Context) error {
		// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		utils.Logger.Info("Poll answer received")
		return nil
	}
}

